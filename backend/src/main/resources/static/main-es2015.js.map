{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.html","./src/app/components/activated-account-patient/activated-account-patient.component.html","./src/app/components/add-clinic-administrator/add-clinic-administrator.component.html","./src/app/components/add-clinic/add-clinic.component.html","./src/app/components/admin-clinic-profile/admin-clinic-profile.component.html","./src/app/components/clinic-search-dialog/clinic-search-dialog.component.html","./src/app/components/clinics-list-patient/clinics-list.component.html","./src/app/components/diagnose/diagnose.component.html","./src/app/components/doctor-list-patient/doctor-list-patient.component.html","./src/app/components/doctor-medical-record/doctor-medical-record.component.html","./src/app/components/doctor-profile/doctor-profile.component.html","./src/app/components/doctor-search-dialog/doctor-search-dialog.component.html","./src/app/components/doctor-vacation-request/doctor-vacation-request.component.html","./src/app/components/home-page-admin-clinic/home-page-admin-clinic.component.html","./src/app/components/home-page-clinical-centre-administrator/home-page-clinical-centre-administrator.component.html","./src/app/components/home-page-doctor/home-page-doctor.component.html","./src/app/components/home-page-nurse/home-page-nurse.component.html","./src/app/components/home-page-patient/home-page-patient.component.html","./src/app/components/home/home.component.html","./src/app/components/login/login.component.html","./src/app/components/medical-history-patient/medical-history-patient.component.html","./src/app/components/medical-record-dialog/medical-record-dialog.component.html","./src/app/components/medical-record-patient/medical-record-patient.component.html","./src/app/components/medicaments/medicaments.component.html","./src/app/components/nurse-date-picker/nurse-date-picker.component.html","./src/app/components/nurse-list-patient/nurse-list-patient.component.html","./src/app/components/nurse-profile/nurse-profile.component.html","./src/app/components/nurse-vacation-request/nurse-vacation-request.component.html","./src/app/components/patient-make-examination/patient-make-examination.component.html","./src/app/components/patient-profile/patient-profile.component.html","./src/app/components/predef-examination-dialog/predef-examination-dialog.component.html","./src/app/components/rate-doctor-and-clinic-patient/rate-doctor-and-clinic-patient.component.html","./src/app/components/register-requests/register-requests.component.html","./src/app/components/registration/registration.component.html","./src/app/components/vacation-request-register/vacation-request-register.component.html","./node_modules/tslib/tslib.es6.js","./src/app/app-routing.module.ts","./src/app/app.component.css","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/activated-account-patient/activated-account-patient.component.css","./src/app/components/activated-account-patient/activated-account-patient.component.ts","./src/app/components/add-clinic-administrator/add-clinic-administrator.component.css","./src/app/components/add-clinic-administrator/add-clinic-administrator.component.ts","./src/app/components/add-clinic/add-clinic.component.css","./src/app/components/add-clinic/add-clinic.component.ts","./src/app/components/admin-clinic-profile/admin-clinic-profile.component.css","./src/app/components/admin-clinic-profile/admin-clinic-profile.component.ts","./src/app/components/clinic-search-dialog/clinic-search-dialog.component.css","./src/app/components/clinic-search-dialog/clinic-search-dialog.component.ts","./src/app/components/clinics-list-patient/clinics-list.component.css","./src/app/components/clinics-list-patient/clinics-list.component.ts","./src/app/components/diagnose/diagnose.component.css","./src/app/components/diagnose/diagnose.component.ts","./src/app/components/doctor-list-patient/doctor-list-patient.component.css","./src/app/components/doctor-list-patient/doctor-list-patient.component.ts","./src/app/components/doctor-medical-record/doctor-medical-record.component.css","./src/app/components/doctor-medical-record/doctor-medical-record.component.ts","./src/app/components/doctor-profile/doctor-profile.component.css","./src/app/components/doctor-profile/doctor-profile.component.ts","./src/app/components/doctor-search-dialog/doctor-search-dialog.component.css","./src/app/components/doctor-search-dialog/doctor-search-dialog.component.ts","./src/app/components/doctor-vacation-request/doctor-vacation-request.component.css","./src/app/components/doctor-vacation-request/doctor-vacation-request.component.ts","./src/app/components/home-page-admin-clinic/home-page-admin-clinic.component.css","./src/app/components/home-page-admin-clinic/home-page-admin-clinic.component.ts","./src/app/components/home-page-clinical-centre-administrator/home-page-clinical-centre-administrator.component.css","./src/app/components/home-page-clinical-centre-administrator/home-page-clinical-centre-administrator.component.ts","./src/app/components/home-page-doctor/home-page-doctor.component.css","./src/app/components/home-page-doctor/home-page-doctor.component.ts","./src/app/components/home-page-nurse/home-page-nurse.component.css","./src/app/components/home-page-nurse/home-page-nurse.component.ts","./src/app/components/home-page-patient/home-page-patient.component.css","./src/app/components/home-page-patient/home-page-patient.component.ts","./src/app/components/home/home.component.css","./src/app/components/home/home.component.ts","./src/app/components/login/login.component.css","./src/app/components/login/login.component.ts","./src/app/components/medical-history-patient/medical-history-patient.component.css","./src/app/components/medical-history-patient/medical-history-patient.component.ts","./src/app/components/medical-record-dialog/medical-record-dialog.component.css","./src/app/components/medical-record-dialog/medical-record-dialog.component.ts","./src/app/components/medical-record-patient/medical-record-patient.component.css","./src/app/components/medical-record-patient/medical-record-patient.component.ts","./src/app/components/medicaments/medicaments.component.css","./src/app/components/medicaments/medicaments.component.ts","./src/app/components/nurse-date-picker/nurse-date-picker.component.css","./src/app/components/nurse-date-picker/nurse-date-picker.component.ts","./src/app/components/nurse-list-patient/nurse-list-patient.component.css","./src/app/components/nurse-list-patient/nurse-list-patient.component.ts","./src/app/components/nurse-profile/nurse-profile.component.css","./src/app/components/nurse-profile/nurse-profile.component.ts","./src/app/components/nurse-vacation-request/nurse-vacation-request.component.css","./src/app/components/nurse-vacation-request/nurse-vacation-request.component.ts","./src/app/components/patient-make-examination/patient-make-examination.component.css","./src/app/components/patient-make-examination/patient-make-examination.component.ts","./src/app/components/patient-profile/patient-profile.component.css","./src/app/components/patient-profile/patient-profile.component.ts","./src/app/components/predef-examination-dialog/predef-examination-dialog.component.css","./src/app/components/predef-examination-dialog/predef-examination-dialog.component.ts","./src/app/components/rate-doctor-and-clinic-patient/rate-doctor-and-clinic-patient.component.css","./src/app/components/rate-doctor-and-clinic-patient/rate-doctor-and-clinic-patient.component.ts","./src/app/components/register-requests/register-requests.component.css","./src/app/components/register-requests/register-requests.component.ts","./src/app/components/registration/registration.component.css","./src/app/components/registration/registration.component.ts","./src/app/components/vacation-request-register/vacation-request-register.component.css","./src/app/components/vacation-request-register/vacation-request-register.component.ts","./src/app/material-module.ts","./src/app/model/ClinicalCentreAdministrator.ts","./src/app/model/Diagnose.ts","./src/app/model/Medicaments.ts","./src/app/model/Zahtev.ts","./src/app/model/ZahtevStatus.ts","./src/app/model/adminClinic.ts","./src/app/model/adminClinicStatus.ts","./src/app/model/clinic.ts","./src/app/model/doctor.ts","./src/app/model/examination.ts","./src/app/model/examinationKind.ts","./src/app/model/examinationReport.ts","./src/app/model/examinationStatus.ts","./src/app/model/examinationType.ts","./src/app/model/medicalRecord.ts","./src/app/model/nurse.ts","./src/app/model/patient.ts","./src/app/model/patientStatus.ts","./src/app/model/role.ts","./src/app/model/user.ts","./src/app/services/admin-clinic.service.ts","./src/app/services/clinic.service.ts","./src/app/services/clinical-centre-administrator.service.ts","./src/app/services/diagnose.service.ts","./src/app/services/doctor.service.ts","./src/app/services/examination-type.service.ts","./src/app/services/examination.service.ts","./src/app/services/medical-record.service.ts","./src/app/services/medicaments.service.ts","./src/app/services/nurse-service.service.ts","./src/app/services/patient.service.ts","./src/app/services/user-service.service.ts","./src/app/services/vacation.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\r\\n  <mat-sidenav #drawer class=\\\"sidenav\\\" fixedInViewport [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\r\\n               [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\" [opened]=\\\"(isHandset$ | async) === true\\\">\\r\\n\\r\\n    <mat-toolbar color=\\\"accent\\\">Menu</mat-toolbar>\\r\\n    <mat-nav-list *ngIf = \\\"isNone()\\\">\\r\\n      <a mat-list-item routerLink=\\\"/login\\\">Login</a>\\r\\n      <a mat-list-item routerLink=\\\"/patient/register\\\">Register</a>\\r\\n    </mat-nav-list>\\r\\n\\r\\n    <mat-nav-list *ngIf=\\\"isPatient()\\\">\\r\\n      <a mat-list-item routerLink=\\\"/patient/profile\\\">Profile</a>\\r\\n      <a mat-list-item routerLink=\\\"/patient/medicalRecord\\\">Medical record</a>\\r\\n      <a mat-list-item routerLink=\\\"/patient/medicalHistory\\\">Medical history</a>\\r\\n      <a mat-list-item routerLink=\\\"/patient/clinics\\\">Clinics</a>\\r\\n      <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n    </mat-nav-list>\\r\\n\\r\\n    <mat-nav-list *ngIf=\\\"isDoctor()\\\">\\r\\n      <a mat-list-item routerLink=\\\"/doctor/list_of_patients\\\">List of patients</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/exemination\\\">Exemination</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/work_calendar\\\">Work calendar</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/requests\\\">Requests</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/operations\\\">Operations</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/profile\\\">Profile</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/VacationRequest\\\">VacationRequest</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/MedicalRecord\\\">MedicalRecords</a>\\r\\n      <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n    </mat-nav-list>\\r\\n\\r\\n    <mat-nav-list *ngIf=\\\"isClinicAdmin()\\\">\\r\\n      <a mat-list-item routerLink=\\\"/admin_clinic/profile\\\">Profile</a>\\r\\n      <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n    </mat-nav-list>\\r\\n\\r\\n    <mat-nav-list *ngIf=\\\"isNurse()\\\">\\r\\n      <a mat-list-item routerLink=\\\"/nurse/profile\\\">Profile</a>\\r\\n      <a mat-list-item routerLink=\\\"/nurse/ListOfPatient\\\">List Of Patients</a>\\r\\n      <a mat-list-item routerLink=\\\"/nurse/WorkCalendar\\\">WorkCalendar</a>\\r\\n      <a mat-list-item routerLink=\\\"/nurse/VacationRequest\\\">Vacation requests</a>\\r\\n      <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n    </mat-nav-list>\\r\\n\\r\\n    <mat-nav-list *ngIf=\\\"isClinicalCentreAdmin()\\\">\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/profile\\\">Profile</a>\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/addClinic\\\">Add Clinic</a>\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/addAdmins\\\">Add Administrator</a>\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/requests\\\">Requests</a>\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/VacationRequests\\\">Vacation Requests</a>\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/addDiagnose\\\">Add Diagnose</a>\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/addMedicament\\\">Add Medicament</a>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n      <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n    </mat-nav-list>\\r\\n\\r\\n  </mat-sidenav>\\r\\n  <mat-sidenav-content>\\r\\n    <mat-toolbar color=\\\"accent\\\">\\r\\n      <button type=\\\"button\\\" aria-label=\\\"Toggle sidenav\\\" mat-icon-button (click)=\\\"drawer.toggle()\\\">\\r\\n        <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\r\\n      </button>\\r\\n      <span>Clinical Centre</span>\\r\\n    </mat-toolbar>\\r\\n    <!-- Add Content Here -->\\r\\n    <router-outlet></router-outlet>\\r\\n  </mat-sidenav-content>\\r\\n</mat-sidenav-container>\\r\\n\"","export default \"<div *ngIf=\\\"success\\\" class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Account activated successfully!</h3>\\r\\n          <hr>\\r\\n          <p>Success! Your account is now active.</p>\\r\\n          <p><span><a href=\\\"http://localhost:8081\\\">Login page</a></span></p>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"addClinicAdministratorForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n              <input type=\\\"email\\\"  id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicAdministratorForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && addClinicAdministratorForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicAdministratorForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && addClinicAdministratorForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicAdministratorForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addClinicAdministratorForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" addClinicAdministratorForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicAdministratorForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addClinicAdministratorForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicAdministratorForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addClinicAdministratorForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"dataSource\\\" multiTemplateDataRows\\r\\n       class=\\\"mat-elevation-z8\\\">\\r\\n  <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of displayedColumns\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let element; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Add Clinic</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"addClinicForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">Name</label>\\r\\n              <input type=\\\"name\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicForm.get('name').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && addClinicForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicForm.get('name').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"addClinicForm.get('name').errors['name']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"address\\\">Address</label>\\r\\n              <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicForm.get('address').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addClinicForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicForm.get('address').errors['required']\\\">Address is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"description\\\">Description</label>\\r\\n              <input type=\\\"text\\\" id=\\\"description\\\" formControlName=\\\"description\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicForm.get('description').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addClinicForm.get('description').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicForm.get('description').errors['required']\\\">Country is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"grade\\\">Grade</label>\\r\\n              <input type=\\\"grade\\\" id=\\\"grade\\\" formControlName=\\\"grade\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicForm.get('grade').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addClinicForm.get('grade').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicForm.get('grade').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"addClinicForm.get('grade').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <button mat-raised-button style=\\\"position: center\\\" color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n          </form>\\r\\n\\r\\n\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"dataSource\\\" multiTemplateDataRows\\r\\n       class=\\\"mat-elevation-z8\\\">\\r\\n  <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of displayedColumns\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let element; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"adminClinicProfileForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && adminClinicProfileForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && adminClinicProfileForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && adminClinicProfileForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && adminClinicProfileForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && adminClinicProfileForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && adminClinicProfileForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" adminClinicProfileForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && adminClinicProfileForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && adminClinicProfileForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && adminClinicProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && adminClinicProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<h2 mat-dialog-title>Search for clinics</h2>\\r\\n\\r\\n<mat-dialog-content [formGroup]=\\\"SearchClinicsGroup\\\">\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" matInput id=\\\"date\\\" formControlName = \\\"date\\\" [matDatepickerFilter]=\\\"myFilter\\\" [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\r\\n      <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n      <mat-datepicker #picker></mat-datepicker>\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div>\\r\\n    <mat-form-field>\\r\\n      <mat-select required=\\\"required\\\" id=\\\"type\\\" formControlName = \\\"type\\\" placeholder=\\\"Select examination type\\\">\\r\\n        <mat-option *ngFor=\\\"let examination_type of types\\\" value=\\\"{{examination_type.label}}\\\">{{examination_type.label}}</mat-option>\\r\\n      </mat-select>\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n  <button class=\\\"mat-raised-button mat-primary\\\"(click)=\\\"save()\\\">Search</button>\\r\\n</mat-dialog-actions>\\r\\n\"","export default \"<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Name\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Clinic name </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Address\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Clinic address </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.address}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"ClinicRating\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Clinic rating </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.clinicRating}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Doctors\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Doctors </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <button mat-flat-button color=\\\"warn\\\" (click)=\\\"doctorList(element)\\\"> Doctors </button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n<button mat-raised-button color=\\\"primary\\\" (click)=\\\"openDialog()\\\">Search</button>\\r\\n<button mat-raised-button color=\\\"accent\\\" (click)=\\\"predefDialog()\\\">Predef examinations</button>\\r\\n\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Add Diagnose</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"addDiagnoseForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"id\\\">ID</label>\\r\\n              <input type=\\\"text\\\" id=\\\"id\\\" formControlName=\\\"id\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addDiagnoseForm.get('id').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && addDiagnoseForm.get('id').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addDiagnoseForm.get('id').errors['required']\\\">Id is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"title\\\">Title</label>\\r\\n              <input type=\\\"text\\\" id=\\\"title\\\" formControlName=\\\"title\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addDiagnoseForm.get('title').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addDiagnoseForm.get('title').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addDiagnoseForm.get('title').errors['required']\\\">Title is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"description\\\">Description</label>\\r\\n              <input type=\\\"text\\\" id=\\\"description\\\" formControlName=\\\"description\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addDiagnoseForm.get('description').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addDiagnoseForm.get('description').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addDiagnoseForm.get('description').errors['required']\\\">Description is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <button mat-raised-button style=\\\"position: center\\\" color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"dataSource\\\" multiTemplateDataRows\\r\\n       class=\\\"mat-elevation-z8\\\">\\r\\n  <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of displayedColumns\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let element; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n\\r\\n\"","export default \"<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"doctorDataSource\\\" class=\\\"mat-elevation-z8\\\" matSort>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Name\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Doctor name </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Surname\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Doctor surname </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.surname}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"DoctorRating\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Doctor rating </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.doctorRating}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Price\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Price </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.specialized.price}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Make\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Schedule it </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"make(element)\\\">Schedule it</button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n<button mat-raised-button color=\\\"primary\\\" (click)=\\\"searchDoctors()\\\">Search</button>\\r\\n<mat-dialog-actions>\\r\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n</mat-dialog-actions>\\r\\n\"","export default \"<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table [dataSource]=\\\"DataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n  <ng-container matColumnDef=\\\"startTime\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Start time </th>\\r\\n    <td mat-cell *matCellDef=\\\"let examination\\\"> {{examination.interval.startTime}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"endTime\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> End Time </th>\\r\\n    <td mat-cell *matCellDef=\\\"let examination\\\"> {{examination.interval.endTime}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"patientName\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Name </th>\\r\\n    <td mat-cell *matCellDef=\\\"let examination\\\"> {{examination.patient.name}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"patientSurname\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Surname </th>\\r\\n    <td mat-cell *matCellDef=\\\"let examination\\\"> {{examination.patient.surname}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Edit\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Edit </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <button mat-flat-button color=\\\"warn\\\" (click)=\\\"edit(element)\\\"> Edit </button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"doctorProfileForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" doctorProfileForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"workHoursFrom\\\">Work hours from</label>\\r\\n              <input type=\\\"number\\\" id=\\\"workHoursFrom\\\" formControlName=\\\"workHoursFrom\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['required']\\\">Work hours from is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['minlength']\\\">A work hours must have at least 2\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"workHoursTo\\\">Work hours to</label>\\r\\n              <input type=\\\"number\\\" id=\\\"workHoursTo\\\" formControlName=\\\"workHoursTo\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['required']\\\">Work hours to is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['minlength']\\\">A work hours to must have at least 2\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<h2 mat-dialog-title>Search for doctors</h2>\\r\\n<mat-dialog-content [formGroup]=\\\"SearchDoctorGroup\\\">\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" id=\\\"name\\\" formControlName=\\\"name\\\" matInput placeholder=\\\"Doctor name\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" matInput placeholder=\\\"Doctor surname\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" id=\\\"rating\\\" formControlName=\\\"rating\\\" matInput placeholder=\\\"Doctor rating\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n  <button class=\\\"mat-raised-button mat-primary\\\"(click)=\\\"save()\\\">Save</button>\\r\\n</mat-dialog-actions>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Vacation request</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"vacationRequestForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"email\\\">EMAIL</label>\\r\\n              <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('email').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('name').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('name').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('name').errors['name']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Surname</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('surname').errors['surname']\\\">Address is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"startingDate\\\">StartingDate</label>\\r\\n              <input type=\\\"text\\\" id=\\\"startingDate\\\" formControlName=\\\"startingDate\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('startingDate').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('startingDate').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('startingDate').errors['required']\\\">Country is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"finishDate\\\">FinishDate</label>\\r\\n              <input type=\\\"text\\\" id=\\\"finishDate\\\" formControlName=\\\"finishDate\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('finishDate').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('finishDate').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('finishDate').errors['required']\\\">Phone Number is required</div>\\r\\n                digits\\r\\n              </div>\\r\\n            </div>\\r\\n            <button mat-raised-button style=\\\"position: center\\\" color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<p>Welcome</p>\\r\\n\"","export default \"\"","export default \"<p>home-page-doctor works!</p>\\r\\n\"","export default \"<p>nurse-home-page works!</p>\\r\\n\"","export default \"<h3>Welcome</h3>\\r\\n\"","export default \"<div class=\\\"image\\\">\\r\\n  <img src=\\\"2.jpg\\\">\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\n        <mat-card>\\n          <h3>Login</h3>\\n          <hr>\\n          <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"email\\\">Email</label>\\n              <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\">\\n              <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\n                <div *ngIf=\\\"f.email.errors.email\\\">Email must be a valid email address</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"password\\\">Password</label>\\n              <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\">\\n              <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n                <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 8 characters long</div>\\n                <div *ngIf=\\\"f.password.errors.pattern\\\">Password must contain at least 1 lowercase, 1 uppercase letter and 1 number</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <a routerLink=\\\"/patient/register\\\">Don't have an account? Register here.</a>\\n            </div>\\n\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Login</button>\\n\\n          </form>\\n        </mat-card>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table [dataSource]=\\\"medicalDataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Kind\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Kind </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <div *ngIf=\\\"element.kind === 1; else elseBlock\\\">Operation</div>\\r\\n      <ng-template #elseBlock>Examination</ng-template>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n  <ng-container matColumnDef=\\\"Clinic\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Clinic </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.clinic.name}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Doctor\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Doctor </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <div *ngFor=\\\"let doctor of element.doctors\\\">{{doctor.name}}</div>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"StartTime\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Start date and time </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.interval.startTime}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"EndTime\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> End date and time </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.interval.endTime}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Rate\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Rate </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <button mat-raised-button color=\\\"warn\\\" (click)=\\\"rate(element)\\\">Rate</button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"medicalRecordForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div>\\r\\n              <mat-form-field class=\\\"form-group\\\">\\r\\n                <input type=\\\"text\\\" id=\\\"height\\\" formControlName=\\\"height\\\"  class=\\\"form-control\\\" matInput placeholder=\\\"Height\\\"\\r\\n                [ngClass]=\\\"{ 'is-invalid': submitted && medicalRecordForm.get('height').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && medicalRecordForm.get('height').errors\\\" class=\\\"invalid-feedback\\\"></div>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div>\\r\\n              <mat-form-field class=\\\"form-group\\\">\\r\\n                <input type=\\\"text\\\" id=\\\"weight\\\" formControlName=\\\"weight\\\"  class=\\\"form-control\\\" matInput placeholder=\\\"Weight\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && medicalRecordForm.get('weight').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && medicalRecordForm.get('weight').errors\\\" class=\\\"invalid-feedback\\\"></div>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div>\\r\\n              <mat-form-field class=\\\"form-group\\\">\\r\\n                <input type=\\\"text\\\" id=\\\"bloodType\\\" formControlName=\\\"bloodType\\\"  class=\\\"form-control\\\" matInput placeholder=\\\"Blood Type\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && medicalRecordForm.get('bloodType').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && medicalRecordForm.get('bloodType').errors\\\" class=\\\"invalid-feedback\\\"></div>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div>\\r\\n              <mat-form-field class=\\\"form-group\\\">\\r\\n                <input type=\\\"text\\\" id=\\\"allergies\\\" formControlName=\\\"allergies\\\"  class=\\\"form-control\\\" matInput placeholder=\\\"Allergies\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && medicalRecordForm.get('allergies').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && medicalRecordForm.get('allergies').errors\\\" class=\\\"invalid-feedback\\\"></div>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n            <div>\\r\\n              <mat-form-field class=\\\"form-group\\\">\\r\\n                <input type=\\\"text\\\" id=\\\"reports\\\" formControlName=\\\"reports\\\"  class=\\\"form-control\\\" matInput placeholder=\\\"Reports\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && medicalRecordForm.get('reports').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && medicalRecordForm.get('reports').errors\\\" class=\\\"invalid-feedback\\\"></div>\\r\\n              </mat-form-field>\\r\\n\\r\\n            </div>\\r\\n            <button  mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n          </form>\\r\\n          <div mat-dialog-actions align=\\\"end\\\">\\r\\n            <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n          </div>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Medical Record</h3>\\r\\n          <hr>\\r\\n            <form class=\\\"medicalRecordForm\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                  <input readonly=\\\"readonly\\\" matInput placeholder=\\\"Height\\\" value=\\\"{{height}}\\\">\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                  <input readonly=\\\"readonly\\\" matInput placeholder=\\\"Weight\\\" value=\\\"{{weight}}\\\">\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                  <input readonly=\\\"readonly\\\" matInput placeholder=\\\"Blood type\\\" value=\\\"{{bloodType}}\\\">\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <mat-form-field class=\\\"toast-top-full-width\\\">\\r\\n                  <textarea readonly=\\\"readonly\\\" matInput placeholder=\\\"Allergies\\\" value=\\\"{{allergies}}\\\"></textarea>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <mat-form-field class=\\\"toast-top-full-width\\\">\\r\\n                  <textarea readonly=\\\"readonly\\\" matInput placeholder=\\\"Examination reports\\\" value=\\\"{{reports}}\\\"></textarea>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n            </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      < class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"addMedicamentForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"id\\\">ID</mat-label>\\r\\n              <input type=\\\"text\\\" id=\\\"id\\\" formControlName=\\\"id\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addMedicamentForm.get('id').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && addMedicamentForm.get('id').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addMedicamentForm.get('id').errors['required']\\\">Email is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"description\\\">Description</label>\\r\\n              <input type=\\\"text\\\" id=\\\"description\\\" formControlName=\\\"description\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addMedicamentForm.get('description').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addMedicamentForm.get('description').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" addMedicamentForm.get('description').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"title\\\">Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"title\\\" formControlName=\\\"title\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addMedicamentForm.get('title').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && addMedicamentForm.get('title').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addMedicamentForm.get('title').errors['required']\\\">Password is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"strenght\\\">Strenght</label>\\r\\n              <input type=\\\"text\\\" id=\\\"strenght\\\" formControlName=\\\"strenght\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addMedicamentForm.get('strenght').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addMedicamentForm.get('strenght').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addMedicamentForm.get('strenght').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n          </form>\\r\\n      </mat-card>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"dataSource\\\" multiTemplateDataRows\\r\\n       class=\\\"mat-elevation-z8\\\">\\r\\n  <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of displayedColumns\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let element; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n\"","export default \"<p>Welcome</p>\\r\\n\\r\\n\\r\\n<mat-form-field>\\r\\n  <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\r\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n  <mat-datepicker #picker></mat-datepicker>\\r\\n</mat-form-field>\\r\\n\\r\\n\"","export default \"<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"dataSource\\\" multiTemplateDataRows\\r\\n       class=\\\"mat-elevation-z8\\\">\\r\\n  <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of displayedColumns\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\\r\\n  <ng-container matColumnDef=\\\"expandedDetail\\\">\\r\\n    <td mat-cell *matCellDef=\\\"let clinic\\\" [attr.colspan]=\\\"displayedColumns.length\\\">\\r\\n      <div class=\\\"example-element-detail\\\"\\r\\n           [@detailExpand]=\\\"clinic == expandedElement ? 'expanded' : 'collapsed'\\\">\\r\\n      </div>\\r\\n\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let element; columns: displayedColumns;\\\"\\r\\n      class=\\\"example-element-row\\\"\\r\\n      [class.example-expanded-row]=\\\"expandedElement === element\\\"\\r\\n      (click)=\\\"expandedElement = expandedElement === element ? null : element\\\">\\r\\n  </tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: ['expandedDetail']\\\" class=\\\"example-detail-row\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"nurseProfileForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseProfileForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && nurseProfileForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseProfileForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && nurseProfileForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseProfileForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseProfileForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" nurseProfileForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseProfileForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseProfileForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"workHoursFrom\\\">WorkHoursFrom</label>\\r\\n              <input type=\\\"workHoursFrom\\\" id=\\\"workHoursFrom\\\" formControlName=\\\"workHoursFrom\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted &&  nurseProfileForm.get('workHoursFrom').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseProfileForm.get('workHoursFrom').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('workHoursFrom').errors['required']\\\">Health Insurance ID is required\\r\\n                </div>\\r\\n\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"workHoursTo\\\">WorkHoursTo</label>\\r\\n                <input type=\\\"text\\\" id=\\\"workHoursTo\\\" formControlName=\\\"workHoursTo\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && nurseProfileForm.get('workHoursTo').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && nurseProfileForm.get('workHoursTo').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"nurseProfileForm.get('workHoursTo').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"phone\\\">PhoneNumber</label>\\r\\n                <input type=\\\"phone\\\" id=\\\"phone\\\" formControlName=\\\"phone\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && nurseProfileForm.get('phone').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && nurseProfileForm.get('phone').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"nurseProfileForm.get('phone').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"nurseProfileForm.get('phone').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n\\r\\n\\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n            </div>\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Vacation request</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"vacationRequestForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"email\\\">EMAIL</label>\\r\\n              <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('email').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('name').errors }\\\">\\r\\n\\r\\n                <div *ngIf=\\\"submitted && vacationRequestForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('name').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('name').errors['name']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Surname</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('surname').errors['surname']\\\">Address is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"startingDate\\\">StartingDate</label>\\r\\n              <input type=\\\"text\\\" id=\\\"startingDate\\\" formControlName=\\\"startingDate\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('startingDate').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('startingDate').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('startingDate').errors['required']\\\">Country is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"finishDate\\\">FinishDate</label>\\r\\n              <input type=\\\"text\\\" id=\\\"finishDate\\\" formControlName=\\\"finishDate\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('finishDate').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('finishDate').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('finishDate').errors['required']\\\">Phone Number is required</div>\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            <button mat-raised-button style=\\\"position: center\\\" color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<h2 mat-dialog-title>Making an appointment</h2>\\r\\n<mat-dialog-content [formGroup]=\\\"MakeGroup\\\">\\r\\n  <div>\\r\\n  <mat-form-field>\\r\\n    <mat-select required=\\\"required\\\" id=\\\"terminTime\\\" formControlName = \\\"terminTime\\\" placeholder=\\\"Select date and time\\\">\\r\\n      <mat-option *ngFor=\\\"let termin of termins\\\" value=\\\"{{termin}}\\\">{{termin}}</mat-option>\\r\\n    </mat-select>\\r\\n  </mat-form-field>\\r\\n  </div>\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n  <button class=\\\"mat-raised-button mat-primary\\\"(click)=\\\"save()\\\">Save</button>\\r\\n</mat-dialog-actions>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"patientProfileForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"patientProfileForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"patientProfileForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"patientProfileForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" patientProfileForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"address\\\">Address</label>\\r\\n              <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('address').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('address').errors['required']\\\">Address is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"city\\\">City</label>\\r\\n              <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('city').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('city').errors['required']\\\">City is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"country\\\">Country</label>\\r\\n              <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('country').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('country').errors['required']\\\">Country is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"patientProfileForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n              <input type=\\\"text\\\" readonly=\\\"readonly\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted &&  patientProfileForm.get('insuranceID').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                </div>\\r\\n                <div\\r\\n                  *ngIf=\\\"patientProfileForm.get('insuranceID').errors['minlength'] ||patientProfileForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                  Health\\r\\n                  Insurance ID must contain exactly 13 characters</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<table mat-table\\n       [dataSource]=\\\"ExaminationDataSource\\\" class=\\\"mat-elevation-z8\\\" matSort>\\n\\n  <ng-container matColumnDef=\\\"StartDate\\\">\\n    <th mat-header-cell *matHeaderCellDef> Start date </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.interval.startTime}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"EndDate\\\">\\n    <th mat-header-cell *matHeaderCellDef> End date </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.interval.endTime}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"DoctorName\\\">\\n    <th mat-header-cell *matHeaderCellDef> Doctor name </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\n      <div *ngFor=\\\"let doctor of element.doctors\\\">\\n        {{doctor.name}}\\n      </div>\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"DoctorSurname\\\">\\n    <th mat-header-cell *matHeaderCellDef> Doctor surname </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\n      <div *ngFor=\\\"let doctor of element.doctors\\\">\\n        {{doctor.surname}}\\n      </div>\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"Type\\\">\\n    <th mat-header-cell *matHeaderCellDef> Type </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.examinationType.label}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"Price\\\">\\n    <th mat-header-cell *matHeaderCellDef> Price </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.examinationType.price}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"Discount\\\">\\n    <th mat-header-cell *matHeaderCellDef> Discount </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.discount}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"Make\\\">\\n    <th mat-header-cell *matHeaderCellDef> Make an appointment  </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"make(element)\\\">Schedule it</button>\\n    </td>\\n  </ng-container>\\n\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n<mat-dialog-actions>\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\n</mat-dialog-actions>\\n\"","export default \"<mat-dialog-content [formGroup]=\\\"RateFormGroup\\\">\\n  <div>\\n    <mat-form-field class=\\\"example-full-width\\\">\\n      <input required=\\\"required\\\" id=\\\"doctorRating\\\" formControlName=\\\"doctorRating\\\" matInput placeholder=\\\"Rate a doctor\\\">\\n    </mat-form-field>\\n  </div>\\n  <div>\\n    <mat-form-field class=\\\"example-full-width\\\">\\n      <input required=\\\"required\\\" id=\\\"clinicRating\\\" formControlName=\\\"clinicRating\\\" matInput placeholder=\\\"Rate a clinic\\\">\\n    </mat-form-field>\\n  </div>\\n</mat-dialog-content>\\n<mat-dialog-actions>\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\n  <button class=\\\"mat-raised-button mat-primary\\\"(click)=\\\"save()\\\">Save</button>\\n</mat-dialog-actions>\\n\"","export default \"<table mat-table [dataSource]=\\\"RequestsDataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n  <ng-container matColumnDef=\\\"email\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Email </th>\\r\\n    <td mat-cell *matCellDef=\\\"let patient\\\"> {{patient.email}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"approving\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Approving </th>\\r\\n    <td mat-cell *matCellDef=\\\"let patient\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\" (click)=\\\"onAccept(patient)\\\">Accept</button>\\r\\n      <button mat-raised-button color=\\\"warn\\\" class=\\\"pull-right\\\">Decline</button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\n        <mat-card>\\n          <h3>Patient Registration</h3>\\n          <hr>\\n          <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"email\\\">Email</label>\\n              <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('email').errors }\\\">\\n\\n              <div *ngIf=\\\"submitted && registerForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('email').errors['required']\\\">Email is required</div>\\n                <div *ngIf=\\\"registerForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"password\\\">Password</label>\\n              <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('password').errors }\\\">\\n              <div *ngIf=\\\"submitted && registerForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('password').errors['required']\\\">Password is required</div>\\n                <div *ngIf=\\\"registerForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\n                  long</div>\\n                <div *ngIf=\\\"registerForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\n                  1 uppercase letter\\n                  and 1 number</div>\\n              </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"password\\\">Repeat password</label>\\n              <input type=\\\"password\\\" id=\\\"repeatPassword\\\" formControlName=\\\"repeatPassword\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('repeatPassword').errors }\\\">\\n              <div *ngIf=\\\"submitted && registerForm.get('repeatPassword').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('repeatPassword').errors['required']\\\">Repeat password is required</div>\\n                <div *ngIf=\\\"registerForm.get('repeatPassword').errors['minlength']\\\">Repeat password  must be at least 8 characters\\n                  long</div>\\n                <div *ngIf=\\\"registerForm.get('repeatPassword').errors['pattern']\\\">Repeat password  must contain at least 1 lowercase,\\n                  1 uppercase letter\\n                  and 1 number and Must be same like password</div>\\n              </div>\\n            </div>\\n\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"name\\\">First Name</label>\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('name').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\" registerForm.get('name').errors['required']\\\">First Name is required</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"surname\\\">Last Name</label>\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('surname').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('surname').errors['required']\\\">Last Name is required</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"address\\\">Address</label>\\n              <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('address').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('address').errors['required']\\\">Address is required</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"city\\\">City</label>\\n              <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('city').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('city').errors['required']\\\">City is required</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"country\\\">Country</label>\\n              <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('country').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('country').errors['required']\\\">Country is required</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"number\\\">Phone Number</label>\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('number').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('number').errors['required']\\\">Phone Number is required</div>\\n                <div *ngIf=\\\"registerForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\n                  digits\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\n              <input type=\\\"text\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted &&  registerForm.get('insuranceID').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\n                </div>\\n                <div\\n                  *ngIf=\\\"registerForm.get('insuranceID').errors['minlength'] ||registerForm.get('insuranceID').errors['maxlength']\\\">\\n                  Health\\n                  Insurance ID must contain exactly 13 characters</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <a routerLink=\\\"/patient/login\\\">Already have an account? Login here.</a>\\n            </div>\\n\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Register</button>\\n\\n          </form>\\n        </mat-card>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<table mat-table [dataSource]=\\\"RequestsDataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n  <ng-container matColumnDef=\\\"email\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> email </th>\\r\\n    <td mat-cell *matCellDef=\\\"let zahtev\\\"> {{zahtev.email}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"startingDate\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> startingDate </th>\\r\\n    <td mat-cell *matCellDef=\\\"let zahtev\\\"> {{zahtev.startingDate}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"finishDate\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> finishDate </th>\\r\\n    <td mat-cell *matCellDef=\\\"let zahtev\\\"> {{zahtev.finishDate}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"approving\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Approving </th>\\r\\n    <td mat-cell *matCellDef=\\\"let zahtev\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\" (click)=\\\"onAccept(zahtev)\\\">Accept</button>\\r\\n      <button mat-raised-button color=\\\"warn\\\" class=\\\"pull-right\\\">Decline</button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegistrationComponent } from './components/registration/registration.component';\r\nimport {HomePagePatientComponent} from './components/home-page-patient/home-page-patient.component';\r\nimport {ClinicsListComponent} from './components/clinics-list-patient/clinics-list.component';\r\nimport {PatientProfileComponent} from './components/patient-profile/patient-profile.component';\r\nimport {HomePageDoctorComponent} from './components/home-page-doctor/home-page-doctor.component';\r\nimport {DoctorProfileComponent} from './components/doctor-profile/doctor-profile.component';\r\nimport {HomePageNurseComponent} from './components/home-page-nurse/home-page-nurse.component';\r\nimport {NurseProfileComponent} from './components/nurse-profile/nurse-profile.component';\r\nimport {HomePageAdminClinicComponent} from './components/home-page-admin-clinic/home-page-admin-clinic.component';\r\nimport {AdminClinicProfileComponent} from './components/admin-clinic-profile/admin-clinic-profile.component';\r\nimport {HomePageClinicalCentreAdministratorComponent} from './components/home-page-clinical-centre-administrator/home-page-clinical-centre-administrator.component';\r\nimport {HomeComponent} from './components/home/home.component';\r\nimport {AppComponent} from './app.component';\r\nimport {AddClinicComponent} from './components/add-clinic/add-clinic.component';\r\nimport {RegisterRequestsComponent} from './components/register-requests/register-requests.component';\r\nimport {MedicalHistoryPatientComponent} from './components/medical-history-patient/medical-history-patient.component';\r\nimport {MedicalRecordPatientComponent} from './components/medical-record-patient/medical-record-patient.component';\r\nimport {AddClinicAdministratorComponent} from './components/add-clinic-administrator/add-clinic-administrator.component';\r\nimport {NurseDatePickerComponent} from './components/nurse-date-picker/nurse-date-picker.component';\r\nimport {NurseListPatientComponent} from './components/nurse-list-patient/nurse-list-patient.component';\r\nimport {NurseVacationRequestComponent} from './components/nurse-vacation-request/nurse-vacation-request.component';\r\nimport {VacationRequestRegisterComponent} from './components/vacation-request-register/vacation-request-register.component';\r\nimport {DoctorVacationRequestComponent} from './components/doctor-vacation-request/doctor-vacation-request.component';\r\nimport {ActivatedAccountPatientComponent} from './components/activated-account-patient/activated-account-patient.component';\r\nimport {DoctorMedicalRecordComponent} from './components/doctor-medical-record/doctor-medical-record.component';\r\nimport {DiagnoseComponent} from './components/diagnose/diagnose.component';\r\nimport {MedicamentsComponent} from './components/medicaments/medicaments.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: HomeComponent,\r\n  },\r\n  {\r\n    path: 'patient/register',\r\n    component: RegistrationComponent,\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'patient/home',\r\n    component: HomePagePatientComponent,\r\n  },\r\n  {\r\n    path: 'patient/medicalHistory',\r\n    component: MedicalHistoryPatientComponent,\r\n  },\r\n  {\r\n    path: 'patient/clinics',\r\n    component: ClinicsListComponent,\r\n  },\r\n  {\r\n    path: 'patient/profile',\r\n    component: PatientProfileComponent,\r\n  },\r\n  {\r\n    path: 'patient/medicalRecord',\r\n    component: MedicalRecordPatientComponent,\r\n  },\r\n  {\r\n    path: 'patient/activatedAccount/:id',\r\n    component: ActivatedAccountPatientComponent,\r\n  },\r\n  {\r\n    path: 'doctor/home',\r\n    component: HomePageDoctorComponent,\r\n  },\r\n  {\r\n    path: 'doctor/profile',\r\n    component: DoctorProfileComponent,\r\n  },\r\n  {\r\n    path: 'nurse/home',\r\n    component: HomePageNurseComponent,\r\n  },\r\n  {\r\n    path: 'nurse/profile',\r\n    component: NurseProfileComponent,\r\n  },\r\n  {\r\n    path: 'admin_clinic/home',\r\n    component: HomePageAdminClinicComponent,\r\n  },\r\n  {\r\n    path: 'admin_clinic/profile',\r\n    component: AdminClinicProfileComponent,\r\n  },\r\n  {\r\n    path: 'clinical-centre-admin/home',\r\n    component: HomePageClinicalCentreAdministratorComponent,\r\n  },\r\n  {\r\n    path: 'clinical-centre-admin/addClinic',\r\n    component: AddClinicComponent,\r\n  },\r\n  {\r\n    path: 'clinical-centre-admin/requests',\r\n    component: RegisterRequestsComponent,\r\n  },\r\n\r\n  {\r\n    path: 'clinical-centre-admin/addAdmins',\r\n    component: AddClinicAdministratorComponent,\r\n  },\r\n\r\n  {\r\n    path: 'nurse/WorkCalendar',\r\n    component: NurseDatePickerComponent,\r\n  },\r\n\r\n  {\r\n    path: 'nurse/ListOfPatient',\r\n    component: NurseListPatientComponent,\r\n  },\r\n  {\r\n    path: 'nurse/VacationRequest',\r\n    component: NurseVacationRequestComponent,\r\n  },\r\n  {\r\n    path: 'clinical-centre-admin/VacationRequests',\r\n    component: VacationRequestRegisterComponent,\r\n  },\r\n  {\r\n    path: 'doctor/VacationRequest',\r\n    component: DoctorVacationRequestComponent,\r\n  },\r\n  {\r\n    path: 'doctor/MedicalRecord',\r\n    component: DoctorMedicalRecordComponent,\r\n  },\r\n  {\r\n    path: 'clinical-centre-admin/addDiagnose',\r\n    component: DiagnoseComponent,\r\n  },\r\n  {\r\n    path: 'clinical-centre-admin/addMedicament',\r\n    component: MedicamentsComponent,\r\n  },\r\n\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","export default \".sidenav-container {\\r\\n  height: 100%;\\r\\n}\\r\\n\\r\\n.sidenav {\\r\\n  width: 200px;\\r\\n}\\r\\n\\r\\n.mat-nav-list{\\r\\n  background-color: khaki;\\r\\n}\\r\\n\\r\\n.mat-toolbar.mat-primary {\\r\\n  position: -webkit-sticky;\\r\\n  position: sticky;\\r\\n  top: 0;\\r\\n  z-index: 1;\\r\\n}\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBQ0E7RUFDRSx3QkFBZ0I7RUFBaEIsZ0JBQWdCO0VBQ2hCLE1BQU07RUFDTixVQUFVO0FBQ1oiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zaWRlbmF2LWNvbnRhaW5lciB7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG59XHJcblxyXG4uc2lkZW5hdiB7XHJcbiAgd2lkdGg6IDIwMHB4O1xyXG59XHJcblxyXG4ubWF0LW5hdi1saXN0e1xyXG4gIGJhY2tncm91bmQtY29sb3I6IGtoYWtpO1xyXG59XHJcbi5tYXQtdG9vbGJhci5tYXQtcHJpbWFyeSB7XHJcbiAgcG9zaXRpb246IHN0aWNreTtcclxuICB0b3A6IDA7XHJcbiAgei1pbmRleDogMTtcclxufVxyXG5cclxuIl19 */\"","\r\nimport { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport {UserServiceService} from './services/user-service.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver, private userService: UserServiceService) { }\r\n\r\n\r\n  public isLoggedIn() {\r\n    return this.userService.isLoggedIn();\r\n  }\r\n\r\n  public isNone() {\r\n    return this.userService.isNone();\r\n  }\r\n\r\n  public isClinicalCentreAdmin() {\r\n    return this.userService.isClinicalCentreAdmin();\r\n  }\r\n\r\n  public isClinicAdmin() {\r\n    return this.userService.isClinicalAdmin();\r\n  }\r\n\r\n  public isPatient() {\r\n    return this.userService.isPatient();\r\n  }\r\n\r\n  public isDoctor() {\r\n    return this.userService.isDoctor();\r\n  }\r\n\r\n  public isNurse() {\r\n    return this.userService.isNurse();\r\n  }\r\n\r\n  public onLogout() {\r\n    this.userService.logOut();\r\n  }\r\n\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule, MatCardModule, MatFormFieldModule, MatInputModule } from '@angular/material';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport {DemoMaterialModule} from './material-module';\r\nimport { RegistrationComponent } from './components/registration/registration.component';\r\nimport { HomePagePatientComponent } from './components/home-page-patient/home-page-patient.component';\r\nimport { ClinicsListComponent } from './components/clinics-list-patient/clinics-list.component';\r\nimport { PatientProfileComponent } from './components/patient-profile/patient-profile.component';\r\nimport {HomePageDoctorComponent} from './components/home-page-doctor/home-page-doctor.component';\r\nimport { DoctorProfileComponent } from './components/doctor-profile/doctor-profile.component';\r\nimport { NurseProfileComponent } from './components/nurse-profile/nurse-profile.component';\r\nimport { HomePageNurseComponent } from './components/home-page-nurse/home-page-nurse.component';\r\nimport { HomePageAdminClinicComponent } from './components/home-page-admin-clinic/home-page-admin-clinic.component';\r\nimport { AdminClinicProfileComponent } from './components/admin-clinic-profile/admin-clinic-profile.component';\r\nimport { HomePageClinicalCentreAdministratorComponent } from './components/home-page-clinical-centre-administrator/home-page-clinical-centre-administrator.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { AddClinicComponent } from './components/add-clinic/add-clinic.component';\r\nimport { RegisterRequestsComponent } from './components/register-requests/register-requests.component';\r\nimport { MedicalHistoryPatientComponent } from './components/medical-history-patient/medical-history-patient.component';\r\nimport { MedicalRecordPatientComponent } from './components/medical-record-patient/medical-record-patient.component';\r\nimport {AddClinicAdministratorComponent} from './components/add-clinic-administrator/add-clinic-administrator.component';\r\nimport { ClinicSearchDialogComponent } from './components/clinic-search-dialog/clinic-search-dialog.component';\r\nimport { DoctorListPatientComponent } from './components/doctor-list-patient/doctor-list-patient.component';\r\nimport {NurseDatePickerComponent} from './components/nurse-date-picker/nurse-date-picker.component';\r\nimport { NurseListPatientComponent } from './components/nurse-list-patient/nurse-list-patient.component';\r\nimport { NurseVacationRequestComponent } from './components/nurse-vacation-request/nurse-vacation-request.component';\r\nimport { VacationRequestRegisterComponent } from './components/vacation-request-register/vacation-request-register.component';\r\nimport { DoctorVacationRequestComponent } from './components/doctor-vacation-request/doctor-vacation-request.component';\r\nimport { DoctorSearchDialogComponent } from './components/doctor-search-dialog/doctor-search-dialog.component';\r\nimport { DoctorMedicalRecordComponent } from './components/doctor-medical-record/doctor-medical-record.component';\r\nimport { MedicalRecordDialogComponent } from './components/medical-record-dialog/medical-record-dialog.component';\r\nimport {PredefExaminationDialogComponent} from './components/predef-examination-dialog/predef-examination-dialog.component';\r\nimport { PatientMakeExaminationComponent } from './components/patient-make-examination/patient-make-examination.component';\r\nimport { ActivatedAccountPatientComponent } from './components/activated-account-patient/activated-account-patient.component';\r\nimport { DiagnoseComponent } from './components/diagnose/diagnose.component';\r\nimport { MedicamentsComponent } from './components/medicaments/medicaments.component';\r\nimport { RateDoctorAndClinicPatientComponent } from './components/rate-doctor-and-clinic-patient/rate-doctor-and-clinic-patient.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n\r\n    LoginComponent,\r\n\r\n    RegistrationComponent,\r\n\r\n    HomePagePatientComponent,\r\n\r\n    ClinicsListComponent,\r\n\r\n    PatientProfileComponent,\r\n\r\n    HomePageDoctorComponent,\r\n\r\n    DoctorProfileComponent,\r\n\r\n    NurseProfileComponent,\r\n\r\n    HomePageNurseComponent,\r\n\r\n    HomePageAdminClinicComponent,\r\n\r\n    AdminClinicProfileComponent,\r\n\r\n    HomePageClinicalCentreAdministratorComponent,\r\n\r\n    HomeComponent,\r\n\r\n    AddClinicComponent,\r\n\r\n    RegisterRequestsComponent,\r\n\r\n    MedicalHistoryPatientComponent,\r\n\r\n    MedicalRecordPatientComponent,\r\n\r\n    AddClinicAdministratorComponent,\r\n\r\n    ClinicSearchDialogComponent,\r\n\r\n    DoctorListPatientComponent,\r\n\r\n    NurseDatePickerComponent,\r\n\r\n    NurseListPatientComponent,\r\n\r\n    NurseVacationRequestComponent,\r\n\r\n    VacationRequestRegisterComponent,\r\n\r\n    DoctorVacationRequestComponent,\r\n\r\n    DoctorSearchDialogComponent,\r\n\r\n    PredefExaminationDialogComponent,\r\n\r\n    PatientMakeExaminationComponent,\r\n\r\n    ActivatedAccountPatientComponent,\r\n\r\n    DoctorMedicalRecordComponent,\r\n\r\n    MedicalRecordDialogComponent,\r\n\r\n    DiagnoseComponent,\r\n\r\n    MedicamentsComponent,\r\n\r\n    RateDoctorAndClinicPatientComponent,\r\n\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    ToastrModule.forRoot({\r\n      timeOut: 2000,\r\n      positionClass: 'toast-top-right',\r\n      preventDuplicates: true,\r\n    }),\r\n    LayoutModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    MatNativeDateModule,\r\n    DemoMaterialModule,\r\n\r\n\r\n  ],\r\n  entryComponents: [\r\n    ClinicSearchDialogComponent,\r\n    DoctorListPatientComponent,\r\n    DoctorSearchDialogComponent,\r\n    PredefExaminationDialogComponent,\r\n    PatientMakeExaminationComponent,\r\n    MedicalRecordDialogComponent,\r\n    RateDoctorAndClinicPatientComponent,\r\n\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWN0aXZhdGVkLWFjY291bnQtcGF0aWVudC9hY3RpdmF0ZWQtYWNjb3VudC1wYXRpZW50LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-activated-account-patient',\r\n  templateUrl: './activated-account-patient.component.html',\r\n  styleUrls: ['./activated-account-patient.component.css']\r\n})\r\nexport class ActivatedAccountPatientComponent implements OnInit {\r\n\r\n  success = false;\r\n\r\n  constructor(private patientService: PatientService,\r\n              private router: Router,\r\n              private activatedRoute: ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n   const id = this.activatedRoute.snapshot.params.id;\r\n   this.activatePatient(id);\r\n   console.log('Id je: ' + id);\r\n  }\r\n  activatePatient(id: number) {\r\n    this.patientService.activatePatient(id).subscribe(data => {\r\n        this.success = true;\r\n      },\r\n      error => {\r\n        alert('Your account is already activated');\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n\r\n}\r\n","export default \"div {\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\ntable {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\nmat-paginator {\\r\\n  width: 75%;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #777;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: -webkit-box;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-name {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9hZGQtY2xpbmljLWFkbWluaXN0cmF0b3IvYWRkLWNsaW5pYy1hZG1pbmlzdHJhdG9yLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFXOztBQUViOztBQUVBO0VBQ0UsVUFBVTtFQUNWLGVBQWU7RUFDZixpQkFBaUI7O0FBRW5COztBQUNBO0VBQ0UsZUFBZTtFQUNmLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsVUFBVTtBQUNaOztBQUNBO0VBQ0UsVUFBVTtFQUNWLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixvQkFBYTtFQUFiLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGVBQWU7RUFDZix1QkFBdUI7RUFDdkIsWUFBWTtFQUNaLG9CQUFvQjtFQUNwQixhQUFhO0VBQ2IsYUFBYTtBQUNmOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGVBQWU7RUFDZixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxZQUFZO0FBQ2QiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2FkZC1jbGluaWMtYWRtaW5pc3RyYXRvci9hZGQtY2xpbmljLWFkbWluaXN0cmF0b3IuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImRpdiB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcblxyXG59XHJcblxyXG50YWJsZSB7XHJcbiAgd2lkdGg6IDc1JTtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcblxyXG59XHJcbi5tYXQtZm9ybS1maWVsZCB7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIG1hcmdpbi10b3A6NTBweDtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxuICB3aWR0aDogNzUlO1xyXG59XHJcbm1hdC1wYWdpbmF0b3Ige1xyXG4gIHdpZHRoOiA3NSU7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbn1cclxuXHJcbnRyLmV4YW1wbGUtZGV0YWlsLXJvdyB7XHJcbiAgaGVpZ2h0OiAwO1xyXG59XHJcblxyXG50ci5leGFtcGxlLWVsZW1lbnQtcm93Om5vdCguZXhhbXBsZS1leHBhbmRlZC1yb3cpOmhvdmVyIHtcclxuICBiYWNrZ3JvdW5kOiAjNzc3O1xyXG59XHJcblxyXG50ci5leGFtcGxlLWVsZW1lbnQtcm93Om5vdCguZXhhbXBsZS1leHBhbmRlZC1yb3cpOmFjdGl2ZSB7XHJcbiAgYmFja2dyb3VuZDogI2VmZWZlZjtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1yb3cgdGQge1xyXG4gIGJvcmRlci1ib3R0b20td2lkdGg6IDA7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGV0YWlsIHtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGlhZ3JhbSB7XHJcbiAgbWluLXdpZHRoOiA4MHB4O1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1xyXG4gIHBhZGRpbmc6IDhweDtcclxuICBmb250LXdlaWdodDogbGlnaHRlcjtcclxuICBtYXJnaW46IDhweCAwO1xyXG4gIGhlaWdodDogMTA0cHg7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtbmFtZSB7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgZm9udC1zaXplOiA0MHB4O1xyXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGVzY3JpcHRpb24ge1xyXG4gIHBhZGRpbmc6IDE2cHg7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGVzY3JpcHRpb24tYXR0cmlidXRpb24ge1xyXG4gIG9wYWNpdHk6IDAuNTtcclxufVxyXG5cclxuIl19 */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {AdminClinic} from '../../model/adminClinic';\r\nimport {AdminClinicService} from '../../services/admin-clinic.service';\r\nimport {Router} from '@angular/router';\r\nimport {MatPaginator, MatTableDataSource} from '@angular/material';\r\nimport {Doctor} from '../../model/doctor';\r\nimport {Clinic} from '../../model/clinic';\r\n\r\n@Component({\r\n  selector: 'app-add-clinic-administrator',\r\n  templateUrl: './add-clinic-administrator.component.html',\r\n  styleUrls: ['./add-clinic-administrator.component.css']\r\n})\r\nexport class AddClinicAdministratorComponent implements OnInit {\r\n\r\n  addClinicAdministratorForm: FormGroup;\r\n  submitted = false;\r\n  adminClinic: AdminClinic;\r\n  displayedColumns: string[] = ['name', 'surname', 'number' ];\r\n  dataSource = new MatTableDataSource<AdminClinic>();\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  expandedElement: AdminClinic;\r\n  admins: Array<AdminClinic> = new Array<AdminClinic>();\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private adminClinicService: AdminClinicService,\r\n    private router: Router,\r\n  ) {\r\n    this.admins = this.adminClinicService.getAllClinicAdmins();\r\n    this.all();\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.addClinicAdministratorForm = this.formBuilder.group({\r\n\r\n      email: new FormControl('', [Validators.required]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl( '', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      number: new FormControl('', [Validators.required, Validators.minLength(9)]),\r\n    });\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  get f() {\r\n    return this.addClinicAdministratorForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.addClinicAdministratorForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.adminClinic = new AdminClinic(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n    );\r\n\r\n    this.adminClinic = new AdminClinic(this.f.email.value, this.f.password.value, this.f.name.value,\r\n      this.f.surname.value, this.f.number.value);\r\n\r\n    this.createClinicAdministrator();\r\n  }\r\n\r\n  private createClinicAdministrator() {\r\n    this.adminClinicService.newAdminClinic(this.adminClinic).subscribe(\r\n      data => {\r\n        this.adminClinicService.addAdminClinic(this.adminClinic);\r\n        this.router.navigate(['/clinical-centre-admin/home']);\r\n      },\r\n      error => {\r\n        alert('Error registration patient');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.dataSource = new MatTableDataSource<AdminClinic>(this.adminClinicService.getAllClinicAdmins());\r\n  }\r\n\r\n\r\n}\r\n","export default \"div {\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\ntable {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\nmat-paginator {\\r\\n  width: 75%;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #777;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: -webkit-box;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-name {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9hZGQtY2xpbmljL2FkZC1jbGluaWMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7O0FBRWI7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsZUFBZTtFQUNmLGlCQUFpQjs7QUFFbkI7O0FBQ0E7RUFDRSxlQUFlO0VBQ2YsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixVQUFVO0FBQ1o7O0FBQ0E7RUFDRSxVQUFVO0VBQ1YsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsU0FBUztBQUNYOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLG9CQUFhO0VBQWIsYUFBYTtBQUNmOztBQUVBO0VBQ0UsZUFBZTtFQUNmLHVCQUF1QjtFQUN2QixZQUFZO0VBQ1osb0JBQW9CO0VBQ3BCLGFBQWE7RUFDYixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsZUFBZTtFQUNmLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLFlBQVk7QUFDZCIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWRkLWNsaW5pYy9hZGQtY2xpbmljLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJkaXYge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG5cclxufVxyXG5cclxudGFibGUge1xyXG4gIHdpZHRoOiA3NSU7XHJcbiAgbWFyZ2luLXRvcDo1MHB4O1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG5cclxufVxyXG4ubWF0LWZvcm0tZmllbGQge1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbiAgd2lkdGg6IDc1JTtcclxufVxyXG5tYXQtcGFnaW5hdG9yIHtcclxuICB3aWR0aDogNzUlO1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG59XHJcblxyXG50ci5leGFtcGxlLWRldGFpbC1yb3cge1xyXG4gIGhlaWdodDogMDtcclxufVxyXG5cclxudHIuZXhhbXBsZS1lbGVtZW50LXJvdzpub3QoLmV4YW1wbGUtZXhwYW5kZWQtcm93KTpob3ZlciB7XHJcbiAgYmFja2dyb3VuZDogIzc3NztcclxufVxyXG5cclxudHIuZXhhbXBsZS1lbGVtZW50LXJvdzpub3QoLmV4YW1wbGUtZXhwYW5kZWQtcm93KTphY3RpdmUge1xyXG4gIGJhY2tncm91bmQ6ICNlZmVmZWY7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtcm93IHRkIHtcclxuICBib3JkZXItYm90dG9tLXdpZHRoOiAwO1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRldGFpbCB7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRpYWdyYW0ge1xyXG4gIG1pbi13aWR0aDogODBweDtcclxuICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcclxuICBwYWRkaW5nOiA4cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XHJcbiAgbWFyZ2luOiA4cHggMDtcclxuICBoZWlnaHQ6IDEwNHB4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LW5hbWUge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIGZvbnQtc2l6ZTogNDBweDtcclxuICBsaW5lLWhlaWdodDogbm9ybWFsO1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRlc2NyaXB0aW9uIHtcclxuICBwYWRkaW5nOiAxNnB4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRlc2NyaXB0aW9uLWF0dHJpYnV0aW9uIHtcclxuICBvcGFjaXR5OiAwLjU7XHJcbn1cclxuXHJcbiJdfQ== */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatDialog, MatPaginator, MatTableDataSource} from '@angular/material';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {Clinic} from '../../model/clinic';\r\nimport {ClinicService} from '../../services/clinic.service';\r\nimport {AdminClinic} from '../../model/adminClinic';\r\n\r\n@Component({\r\n  selector: 'app-add-clinic',\r\n  templateUrl: './add-clinic.component.html',\r\n  styleUrls: ['./add-clinic.component.css']\r\n})\r\nexport class AddClinicComponent implements OnInit {\r\n\r\n  addClinicForm: FormGroup;\r\n  submitted = false;\r\n  clinic: Clinic;\r\n  displayedColumns: string[] = ['name', 'address', 'description' ];\r\n  dataSource = new MatTableDataSource<Clinic>();\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  expandedElement: Clinic;\r\n  clinics: Array<Clinic> = new Array<Clinic>();\r\n\r\n  constructor(public dialog: MatDialog,\r\n              private formBuilder: FormBuilder,\r\n              private router: Router,\r\n              private clinicService: ClinicService) {\r\n\r\n    this.clinics = this.clinicService.getAllClinics();\r\n    this.all();\r\n  }\r\n\r\n  address: string;\r\n  name: string;\r\n  description: string;\r\n  grade: string;\r\n\r\n  ngOnInit() {\r\n    this.addClinicForm = this.formBuilder.group({\r\n\r\n      name: new FormControl('', [Validators.required]),\r\n      address: new FormControl('', [Validators.required]),\r\n      description: new FormControl('', [Validators.required]),\r\n      grade: new FormControl('', [Validators.required]),\r\n    });\r\n\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n\r\n  get f() {\r\n    return this.addClinicForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.addClinicForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.clinic = new Clinic(\r\n      this.f.name.value,\r\n      this.f.address.value,\r\n      this.f.description.value,\r\n      this.f.grade.value,\r\n    );\r\n\r\n    this.clinic = new Clinic(this.f.name.value, this.f.address.value, this.f.description.value, this.f.grade.value);\r\n\r\n    this.createClinic();\r\n  }\r\n\r\n  private createClinic() {\r\n    this.clinicService.newClinic(this.clinic).subscribe(\r\n      data => {\r\n        this.clinicService.addClinic(this.clinic);\r\n        this.router.navigate(['/clinical-centre-admin/home']);\r\n      },\r\n      error => {\r\n        alert('Error registration patient');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.dataSource = new MatTableDataSource<Clinic>(this.clinicService.getAllClinics());\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWRtaW4tY2xpbmljLXByb2ZpbGUvYWRtaW4tY2xpbmljLXByb2ZpbGUuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {AdminClinic} from \"../../model/adminClinic\";\r\nimport {User} from \"../../model/user\";\r\nimport {Router} from \"@angular/router\";\r\nimport {UserServiceService} from \"../../services/user-service.service\";\r\nimport {Role} from \"../../model/role\";\r\nimport {AdminClinicService} from \"../../services/admin-clinic.service\";\r\n\r\n@Component({\r\n  selector: 'app-admin-clinic-profile',\r\n  templateUrl: './admin-clinic-profile.component.html',\r\n  styleUrls: ['./admin-clinic-profile.component.css']\r\n})\r\nexport class AdminClinicProfileComponent implements OnInit {\r\n\r\n  adminClinicProfileForm: FormGroup;\r\n  submitted = false;\r\n  adminClinic: AdminClinic;\r\n  selectedAdminClinic: AdminClinic;\r\n  user: User;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private adminClinicService: AdminClinicService,\r\n              private  userService: UserServiceService) {\r\n    this.user = JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedAdminClinic = adminClinicService.getAdminClinic(this.user.email);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.adminClinicProfileForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedAdminClinic.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedAdminClinic.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedAdminClinic.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedAdminClinic.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedAdminClinic.number, [Validators.required, Validators.minLength(9)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.adminClinicProfileForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.adminClinicProfileForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.adminClinic = new AdminClinic(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value\r\n    );\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.CLINIC_ADMINISTRATOR);\r\n\r\n    this.editAdminClinic();\r\n  }\r\n\r\n  private editAdminClinic(){\r\n    this.adminClinicService.editAdminClinic(this.adminClinic).subscribe(\r\n      data => {\r\n        this.userService.setUser(this.user);\r\n        this.adminClinicService.setAdminClinic(this.adminClinic);\r\n        this.router.navigate(['/admin_clinic/home']);\r\n      },\r\n      error => {\r\n        alert('Error edit doctor');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljLXNlYXJjaC1kaWFsb2cvY2xpbmljLXNlYXJjaC1kaWFsb2cuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, Inject, Input, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {ExaminationType} from '../../model/examinationType';\r\nimport {MAT_DIALOG_DATA, MatDialogRef, MatTableDataSource} from '@angular/material';\r\nimport {ExaminationsTypeService} from '../../services/examination-type.service';\r\nimport {Clinic} from '../../model/clinic';\r\nimport {ClinicService} from '../../services/clinic.service';\r\n\r\n\r\nexport class Result {\r\n  date: string;\r\n  clinics: Array<Clinic> = new Array<Clinic>();\r\n}\r\n\r\n@Component({\r\n  selector: 'app-clinic-search-dialog',\r\n  templateUrl: './clinic-search-dialog.component.html',\r\n  styleUrls: ['./clinic-search-dialog.component.css']\r\n})\r\nexport class ClinicSearchDialogComponent implements OnInit {\r\n\r\n  SearchClinicsGroup: FormGroup;\r\n  clinics: Array<Clinic> = new Array<Clinic>();\r\n  types: Array<ExaminationType> = new Array<ExaminationType>();\r\n  result: Result = new Result();\r\n  myFilter = (d: Date): boolean => {\r\n    const day = d.getDay();\r\n    // Subota i nedelja se ne radi.\r\n    return day !== 0 && day !== 6;\r\n  }\r\n\r\n  constructor(private clinicService: ClinicService,\r\n              private formBuilder: FormBuilder,\r\n              private examinationTypeService: ExaminationsTypeService,\r\n              private dialogRef: MatDialogRef<ClinicSearchDialogComponent>,\r\n              @Inject(MAT_DIALOG_DATA) data) {\r\n    this.types = examinationTypeService.getAllTypes();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.SearchClinicsGroup = this.formBuilder.group({\r\n      date: new FormControl(''),\r\n      type: new FormControl(''),\r\n    });\r\n  }\r\n  get f() {\r\n    return this.SearchClinicsGroup.controls;\r\n  }\r\n\r\n  save() {\r\n    if (this.SearchClinicsGroup.invalid) {\r\n      return;\r\n    }\r\n\r\n    console.log(this.f.type.value);\r\n    this.clinicService.setType(this.f.type.value);\r\n    const a = new Date(this.f.date.value);\r\n\r\n    const date = a.toLocaleDateString();\r\n    console.log(date);\r\n\r\n    this.clinics = this.clinicService.getClinicsWithType(this.f.type.value, date);\r\n    this.result.date = date;\r\n    this.result.clinics = this.clinics;\r\n    this.dialogRef.close(this.result);\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n}\r\n","export default \"div {\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\ntable {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\nmat-paginator {\\r\\n  width: 75%;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #777;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: -webkit-box;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-name {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n.mat-raised-button {\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9jbGluaWNzLWxpc3QtcGF0aWVudC9jbGluaWNzLWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7O0FBRWI7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsZUFBZTtFQUNmLGlCQUFpQjs7QUFFbkI7O0FBQ0E7RUFDRSxlQUFlO0VBQ2YsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixVQUFVO0FBQ1o7O0FBQ0E7RUFDRSxVQUFVO0VBQ1YsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsU0FBUztBQUNYOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLG9CQUFhO0VBQWIsYUFBYTtBQUNmOztBQUVBO0VBQ0UsZUFBZTtFQUNmLHVCQUF1QjtFQUN2QixZQUFZO0VBQ1osb0JBQW9CO0VBQ3BCLGFBQWE7RUFDYixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsZUFBZTtFQUNmLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljcy1saXN0LXBhdGllbnQvY2xpbmljcy1saXN0LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJkaXYge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG5cclxufVxyXG5cclxudGFibGUge1xyXG4gIHdpZHRoOiA3NSU7XHJcbiAgbWFyZ2luLXRvcDo1MHB4O1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG5cclxufVxyXG4ubWF0LWZvcm0tZmllbGQge1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbiAgd2lkdGg6IDc1JTtcclxufVxyXG5tYXQtcGFnaW5hdG9yIHtcclxuICB3aWR0aDogNzUlO1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG59XHJcblxyXG50ci5leGFtcGxlLWRldGFpbC1yb3cge1xyXG4gIGhlaWdodDogMDtcclxufVxyXG5cclxudHIuZXhhbXBsZS1lbGVtZW50LXJvdzpub3QoLmV4YW1wbGUtZXhwYW5kZWQtcm93KTpob3ZlciB7XHJcbiAgYmFja2dyb3VuZDogIzc3NztcclxufVxyXG5cclxudHIuZXhhbXBsZS1lbGVtZW50LXJvdzpub3QoLmV4YW1wbGUtZXhwYW5kZWQtcm93KTphY3RpdmUge1xyXG4gIGJhY2tncm91bmQ6ICNlZmVmZWY7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtcm93IHRkIHtcclxuICBib3JkZXItYm90dG9tLXdpZHRoOiAwO1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRldGFpbCB7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRpYWdyYW0ge1xyXG4gIG1pbi13aWR0aDogODBweDtcclxuICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcclxuICBwYWRkaW5nOiA4cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XHJcbiAgbWFyZ2luOiA4cHggMDtcclxuICBoZWlnaHQ6IDEwNHB4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LW5hbWUge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIGZvbnQtc2l6ZTogNDBweDtcclxuICBsaW5lLWhlaWdodDogbm9ybWFsO1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRlc2NyaXB0aW9uIHtcclxuICBwYWRkaW5nOiAxNnB4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRlc2NyaXB0aW9uLWF0dHJpYnV0aW9uIHtcclxuICBvcGFjaXR5OiAwLjU7XHJcbn1cclxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxufVxyXG4iXX0= */\"","import {Component, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {MatDialog, MatPaginator, MatTableDataSource, MatSort} from '@angular/material';\r\nimport {Clinic} from '../../model/clinic';\r\nimport {ClinicService} from '../../services/clinic.service';\r\nimport {Doctor} from '../../model/doctor';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport {ClinicSearchDialogComponent} from '../clinic-search-dialog/clinic-search-dialog.component';\r\nimport {DoctorListPatientComponent} from '../doctor-list-patient/doctor-list-patient.component';\r\nimport {PredefExaminationDialogComponent} from '../predef-examination-dialog/predef-examination-dialog.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-clinics-list',\r\n  templateUrl: './clinics-list.component.html',\r\n  styleUrls: ['./clinics-list.component.css'],\r\n})\r\nexport class ClinicsListComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['Name', 'Address', 'ClinicRating', 'Doctors'];\r\n  clinic: Clinic;\r\n  doctor: Doctor;\r\n  condition: boolean;\r\n  tmp: string;\r\n  str: string;\r\n  tmp1: Array<string> = new Array<string>();\r\n  arr: Array<string[]> = new Array<string[]>();\r\n  dataSource = new MatTableDataSource<Clinic>();\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n  clinics: Array<Clinic> = new Array<Clinic>();\r\n\r\n  constructor(\r\n    private clinicService: ClinicService,\r\n    private doctorService: DoctorService,\r\n    public dialog: MatDialog,\r\n    public doctorsDialog: MatDialog,\r\n    public predefExaminaitonDialog: MatDialog,\r\n  ) {\r\n    // this.doctors = this.doctorService.getAllDoctors();\r\n    this.clinics = this.clinicService.getAllClinics();\r\n    this.all();\r\n    this.condition = true;\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n\r\n  }\r\n\r\n  all() {\r\n      this.dataSource = new MatTableDataSource(this.clinicService.getAllClinics());\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n\r\n    // this.doctordataSource = new MatTableDataSource<Doctor>(this.doctorService.getAllDoctors());\r\n  }\r\n\r\n  openDialog() {\r\n    const dialog = this.dialog.open(ClinicSearchDialogComponent);\r\n    dialog.afterClosed().subscribe(data => {\r\n       console.log('DATA ISPOD ZA KLINIKE')\r\n       console.log(data);\r\n       if (data !== undefined) {\r\n         this.clinics = data.clinics;\r\n         console.log(this.clinics);\r\n         this.dataSource = new MatTableDataSource(this.clinics);\r\n         this.condition = false;\r\n         this.tmp = data.date;\r\n         this.doctorService.setDate(data.date);\r\n       }\r\n      }\r\n    );\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  doctorList(element: Clinic) {\r\n    this.doctorService.setDoctorss(element.doctors);\r\n    this.clinicService.setClinicForExamination(element);\r\n    this.arr = new Array<string[]>();\r\n    for (const d of element.doctors) {\r\n      this.tmp1 = new Array<string>();\r\n      // this.tmp1 = this.doctorService.getDoctorsTermins(this.tmp, d.email);\r\n    }\r\n    // this.doctorService.setExaminationsInterval(this.arr);\r\n    // const dialog = this.doctorsDialog.open(DoctorListPatientComponent);\r\n    // setTimeout(() => {const dialog = this.doctorsDialog.open(DoctorListPatientComponent);  dialog.updateSize('1000px', '600'); }, 800);\r\n    const dialog = this.doctorsDialog.open(DoctorListPatientComponent);\r\n    dialog.updateSize('1000px', '600');\r\n  }\r\n  predefDialog() {\r\n    const dialog = this.predefExaminaitonDialog.open(PredefExaminationDialogComponent);\r\n    dialog.updateSize('1000px', '600');\r\n  }\r\n\r\n\r\n}\r\n","export default \"div {\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\ntable {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\nmat-paginator {\\r\\n  width: 75%;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #777;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: -webkit-box;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-name {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9kaWFnbm9zZS9kaWFnbm9zZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBVzs7QUFFYjs7QUFFQTtFQUNFLFVBQVU7RUFDVixlQUFlO0VBQ2YsaUJBQWlCOztBQUVuQjs7QUFDQTtFQUNFLGVBQWU7RUFDZixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLFVBQVU7QUFDWjs7QUFDQTtFQUNFLFVBQVU7RUFDVixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxTQUFTO0FBQ1g7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsb0JBQWE7RUFBYixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsdUJBQXVCO0VBQ3ZCLFlBQVk7RUFDWixvQkFBb0I7RUFDcEIsYUFBYTtFQUNiLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsWUFBWTtBQUNkIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9kaWFnbm9zZS9kaWFnbm9zZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiZGl2IHtcclxuICB3aWR0aDogMTAwJTtcclxuXHJcbn1cclxuXHJcbnRhYmxlIHtcclxuICB3aWR0aDogNzUlO1xyXG4gIG1hcmdpbi10b3A6NTBweDtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxuXHJcbn1cclxuLm1hdC1mb3JtLWZpZWxkIHtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgbWFyZ2luLXRvcDo1MHB4O1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG4gIHdpZHRoOiA3NSU7XHJcbn1cclxubWF0LXBhZ2luYXRvciB7XHJcbiAgd2lkdGg6IDc1JTtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxufVxyXG5cclxudHIuZXhhbXBsZS1kZXRhaWwtcm93IHtcclxuICBoZWlnaHQ6IDA7XHJcbn1cclxuXHJcbnRyLmV4YW1wbGUtZWxlbWVudC1yb3c6bm90KC5leGFtcGxlLWV4cGFuZGVkLXJvdyk6aG92ZXIge1xyXG4gIGJhY2tncm91bmQ6ICM3Nzc7XHJcbn1cclxuXHJcbnRyLmV4YW1wbGUtZWxlbWVudC1yb3c6bm90KC5leGFtcGxlLWV4cGFuZGVkLXJvdyk6YWN0aXZlIHtcclxuICBiYWNrZ3JvdW5kOiAjZWZlZmVmO1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LXJvdyB0ZCB7XHJcbiAgYm9yZGVyLWJvdHRvbS13aWR0aDogMDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kZXRhaWwge1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kaWFncmFtIHtcclxuICBtaW4td2lkdGg6IDgwcHg7XHJcbiAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XHJcbiAgcGFkZGluZzogOHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBsaWdodGVyO1xyXG4gIG1hcmdpbjogOHB4IDA7XHJcbiAgaGVpZ2h0OiAxMDRweDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1uYW1lIHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBmb250LXNpemU6IDQwcHg7XHJcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kZXNjcmlwdGlvbiB7XHJcbiAgcGFkZGluZzogMTZweDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kZXNjcmlwdGlvbi1hdHRyaWJ1dGlvbiB7XHJcbiAgb3BhY2l0eTogMC41O1xyXG59XHJcblxyXG4iXX0= */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Diagnose} from '../../model/Diagnose';\r\nimport {MatPaginator, MatTableDataSource} from '@angular/material';\r\nimport {Router} from '@angular/router';\r\nimport {DiagnoseService} from '../../services/diagnose.service';\r\n\r\n@Component({\r\n  selector: 'app-diagnose',\r\n  templateUrl: './diagnose.component.html',\r\n  styleUrls: ['./diagnose.component.css']\r\n})\r\nexport class DiagnoseComponent implements OnInit {\r\n\r\n  addDiagnoseForm: FormGroup;\r\n  submitted = false;\r\n  diagnose: Diagnose;\r\n  displayedColumns = ['id', 'title', 'description'];\r\n  expandedElement: Diagnose;\r\n  dataSource = new MatTableDataSource<Diagnose>();\r\n  diagnoses: Array<Diagnose>;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n\r\n  constructor( private formbuilder: FormBuilder,\r\n               private diagnoseService: DiagnoseService,\r\n               private router: Router,\r\n               ) {\r\n    this.diagnoses = this.diagnoseService.getAllDiagnoses();\r\n    this.all();\r\n  }\r\n\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n\r\n  ngOnInit() {\r\n    this.addDiagnoseForm = this.formbuilder.group({\r\n      id: new FormControl('', [Validators.required]),\r\n      title: new FormControl('', [Validators.required]),\r\n      description: new FormControl('', [Validators.required]),\r\n    });\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  get f() {\r\n    return this.addDiagnoseForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.addDiagnoseForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.diagnose = new Diagnose(\r\n      this.f.id.value,\r\n      this.f.title.value,\r\n      this.f.description.value,\r\n    );\r\n\r\n    this.diagnose = new Diagnose(this.f.id.value, this.f.title.value, this.f.description.value);\r\n\r\n    this.createDiagnose();\r\n  }\r\n\r\n  private createDiagnose() {\r\n    this.diagnoseService.newDiagnose(this.diagnose).subscribe(\r\n      data => {\r\n        this.diagnoseService.addDiagnose(this.diagnose);\r\n        this.router.navigate(['/clinical-centre-admin/home']);\r\n      },\r\n      error => {\r\n        alert('Error adding diagnose');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.dataSource = new MatTableDataSource(this.diagnoseService.getAllDiagnoses());\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n","export default \" table {\\r\\n   width: 100%;\\r\\n }\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9kb2N0b3ItbGlzdC1wYXRpZW50L2RvY3Rvci1saXN0LXBhdGllbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQztHQUNFLFdBQVc7Q0FDYiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLWxpc3QtcGF0aWVudC9kb2N0b3ItbGlzdC1wYXRpZW50LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIgdGFibGUge1xyXG4gICB3aWR0aDogMTAwJTtcclxuIH1cclxuIl19 */\"","import {ChangeDetectorRef, Component, Input, OnInit} from '@angular/core';\r\nimport {MatDialog, MatDialogRef, MatTableDataSource} from '@angular/material';\r\nimport {Doctor} from '../../model/doctor';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport {DoctorSearchDialogComponent} from '../doctor-search-dialog/doctor-search-dialog.component';\r\nimport {PatientMakeExaminationComponent} from '../patient-make-examination/patient-make-examination.component';\r\n\r\nexport class DataTable {\r\n  termin: string;\r\n  doctor: Doctor;\r\n  constructor() {}\r\n}\r\n\r\n@Component({\r\n  selector: 'app-doctor-list-patient',\r\n  templateUrl: './doctor-list-patient.component.html',\r\n  styleUrls: ['./doctor-list-patient.component.css']\r\n})\r\nexport class DoctorListPatientComponent implements OnInit {\r\n  displayedColumns: string[] = ['Name', 'Surname', 'DoctorRating', 'Price', 'Make'];\r\n  doctorDataSource: MatTableDataSource<Doctor>;\r\n  doctors: Array<Doctor>;\r\n  date: string;\r\n  termins: Array<string[]> = new Array<string[]>();\r\n  @Input() doctorSearchDialog: DoctorSearchDialogComponent;\r\n  constructor(private doctorService: DoctorService,\r\n              public searchDialog: MatDialog,\r\n              public dialog: MatDialog,\r\n              private dialogRef: MatDialogRef<DoctorSearchDialogComponent>) {\r\n    this.doctors = doctorService.getDoctorss();\r\n    this.termins = doctorService.getExaminationsInterval();\r\n    this.doctorDataSource = new MatTableDataSource(this.doctors);\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.doctorDataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.doctorDataSource.paginator) {\r\n      this.doctorDataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  searchDoctors() {\r\n    const dialog = this.searchDialog.open(DoctorSearchDialogComponent);\r\n    dialog.afterClosed().subscribe(data => {\r\n        if (data !== undefined) {\r\n          this.doctors = data;\r\n          this.doctorDataSource = new MatTableDataSource(data);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  make(element) {\r\n    this.doctorService.setDoctorForMake(element);\r\n    setTimeout(() => {const dialog = this.searchDialog.open(PatientMakeExaminationComponent); dialog.afterClosed().subscribe(data => {\r\n      this.dialogRef.close();\r\n    }); }, 200);\r\n\r\n    // const dialog = this.searchDialog.open(PatientMakeExaminationComponent);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","export default \"table {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9kb2N0b3ItbWVkaWNhbC1yZWNvcmQvZG9jdG9yLW1lZGljYWwtcmVjb3JkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxVQUFVO0VBQ1YsZUFBZTtFQUNmLGlCQUFpQjs7QUFFbkIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2RvY3Rvci1tZWRpY2FsLXJlY29yZC9kb2N0b3ItbWVkaWNhbC1yZWNvcmQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInRhYmxlIHtcclxuICB3aWR0aDogNzUlO1xyXG4gIG1hcmdpbi10b3A6NTBweDtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxuXHJcbn1cclxuIl19 */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatDialog, MatPaginator, MatTableDataSource} from '@angular/material';\r\nimport {MedicalRecord} from '../../model/medicalRecord';\r\nimport {MedicalRecordService} from '../../services/medical-record.service';\r\nimport {Patient} from '../../model/patient';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {Clinic} from '../../model/clinic';\r\nimport {MedicalRecordPatientComponent} from '../medical-record-patient/medical-record-patient.component';\r\nimport {MedicalRecordDialogComponent} from '../medical-record-dialog/medical-record-dialog.component';\r\nimport {ExaminationService} from '../../services/examination.service';\r\nimport {Examination} from '../../model/examination';\r\n\r\n@Component({\r\n  selector: 'app-doctor-medical-record',\r\n  templateUrl: './doctor-medical-record.component.html',\r\n  styleUrls: ['./doctor-medical-record.component.css']\r\n})\r\nexport class DoctorMedicalRecordComponent implements OnInit {\r\n\r\n  patient: Patient;\r\n  pat: Array<Examination>;\r\n  displayedColumns: string[] = ['startTime', 'endTime', 'patientName', 'patientSurname', 'Edit'];\r\n  DataSource: MatTableDataSource<Examination>;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  expandedElement: Patient;\r\n  condition: boolean;\r\n  rec: Array<MedicalRecord> = new Array<MedicalRecord>();\r\n\r\n  constructor(public dialog: MatDialog,\r\n              public medReqDialog: MatDialog,\r\n              private medicalRecServis: MedicalRecordService,\r\n              private patientService: PatientService,\r\n              private medicalService: MedicalRecordService,\r\n              private examinationService: ExaminationService,\r\n              private userService: UserServiceService) {\r\n\r\n    this.rec = this.medicalRecServis.getAllMedicalRecords();\r\n    const user = JSON.parse(userService.isLoggedIn());\r\n\r\n    this.pat = this.examinationService.getExaminationsForDoctor(user.email);\r\n    this.condition = false;\r\n    console.log('Ispod1');\r\n    console.log(this.pat);\r\n    this.all();\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n    this.DataSource.paginator = this.paginator;\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.DataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.DataSource = new MatTableDataSource(this.pat);\r\n  }\r\n\r\n  edit(element: Examination) {\r\n\r\n    const medicalRecordForDialog = this.medicalRecServis.getMedicalRecordForPatient(element.patient.email);\r\n    this.medicalService.setMedicalRecordForDialog(medicalRecordForDialog);\r\n    this.patientService.setPatient1(element.patient);\r\n    this.condition = this.medicalService.getLocalDateAndTime(element.interval.startTime, element.interval.endTime);\r\n\r\n  //  setTimeout(() => {\r\n    if (this.condition === true) {\r\n        console.log('u kondition sam');\r\n        console.log(this.condition);\r\n        setTimeout(() => {const dialog = this.medReqDialog.open(MedicalRecordDialogComponent); }, 1000);\r\n      }\r\n //   }, 200);\r\n\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXByb2ZpbGUvZG9jdG9yLXByb2ZpbGUuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Doctor} from '../../model/doctor';\r\nimport {User} from '../../model/user';\r\nimport {Router} from '@angular/router';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport {Role} from '../../model/role';\r\n\r\n@Component({\r\n  selector: 'app-doctor-profile',\r\n  templateUrl: './doctor-profile.component.html',\r\n  styleUrls: ['./doctor-profile.component.css']\r\n})\r\nexport class DoctorProfileComponent implements OnInit {\r\n\r\n  doctorProfileForm: FormGroup;\r\n  submitted = false;\r\n  doctor: Doctor;\r\n  selectedDoctor: Doctor;\r\n  user: User;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private doctorService: DoctorService,\r\n              private  userService: UserServiceService) {\r\n    this.user = JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedDoctor = doctorService.getDoctor(this.user.email);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.doctorProfileForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedDoctor.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedDoctor.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedDoctor.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedDoctor.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedDoctor.phone, [Validators.required, Validators.minLength(9)]),\r\n      workHoursFrom: new FormControl(this.selectedDoctor.workHoursFrom, [Validators.required, Validators.minLength(2),\r\n        Validators.maxLength(2)]),\r\n      workHoursTo: new FormControl(this.selectedDoctor.workHoursTo, [Validators.required, Validators.minLength(2),\r\n        Validators.maxLength(2)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.doctorProfileForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.doctorProfileForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.doctor = new Doctor(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.workHoursFrom.value,\r\n      this.f.workHoursTo.value,\r\n    );\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.DOCTOR);\r\n\r\n    this.editDoctor();\r\n  }\r\n\r\n  private editDoctor() {\r\n    this.doctorService.editDoctor(this.doctor).subscribe(\r\n      data => {\r\n        this.userService.setUser(this.user);\r\n        this.doctorService.setDoctor(this.doctor);\r\n        this.router.navigate(['/doctor/home']);\r\n        console.log('uspesno');\r\n      },\r\n      error => {\r\n        alert('Error edit doctor');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXNlYXJjaC1kaWFsb2cvZG9jdG9yLXNlYXJjaC1kaWFsb2cuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\r\nimport {Doctor} from '../../model/doctor';\r\nimport {DoctorService} from '../../services/doctor.service';\r\n\r\n@Component({\r\n  selector: 'app-doctor-search-dialog',\r\n  templateUrl: './doctor-search-dialog.component.html',\r\n  styleUrls: ['./doctor-search-dialog.component.css']\r\n})\r\nexport class DoctorSearchDialogComponent implements OnInit {\r\n\r\n  SearchDoctorGroup: FormGroup;\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n  constructor(private formBuilder: FormBuilder,\r\n              private doctorService: DoctorService,\r\n              private dialogRef: MatDialogRef<DoctorSearchDialogComponent>,\r\n              @Inject(MAT_DIALOG_DATA) data) { }\r\n\r\n  ngOnInit() {\r\n    this.SearchDoctorGroup = this.formBuilder.group({\r\n      name: new FormControl(''),\r\n      surname: new FormControl(''),\r\n      rating: new FormControl('', [Validators.required, Validators.minLength(1), Validators.maxLength(1),\r\n        Validators.pattern('[0-5]*')]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.SearchDoctorGroup.controls;\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  save() {\r\n    if (this.SearchDoctorGroup.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.doctors = this.doctorService.getDoctrosWithSearch(this.f.name.value, this.f.surname.value, this.f.rating.value);\r\n    console.log(this.doctors);\r\n    this.dialogRef.close(this.doctors);\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXZhY2F0aW9uLXJlcXVlc3QvZG9jdG9yLXZhY2F0aW9uLXJlcXVlc3QuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Zahtev} from '../../model/Zahtev';\r\nimport {MatDialog} from '@angular/material';\r\nimport {Router} from '@angular/router';\r\nimport {VacationService} from '../../services/vacation.service';\r\nimport {ZahtevStatus} from '../../model/ZahtevStatus';\r\n\r\n@Component({\r\n  selector: 'app-doctor-vacation-request',\r\n  templateUrl: './doctor-vacation-request.component.html',\r\n  styleUrls: ['./doctor-vacation-request.component.css']\r\n})\r\nexport class DoctorVacationRequestComponent implements OnInit {\r\n\r\n  vacationRequestForm: FormGroup;\r\n  submitted = false;\r\n  zahtev: Zahtev;\r\n\r\n  constructor(public dialog: MatDialog,\r\n              private formBuilder: FormBuilder,\r\n              private router: Router,\r\n              private vacationService: VacationService,\r\n  ) {}\r\n\r\n\r\n  ngOnInit() {\r\n    this.vacationRequestForm = this.formBuilder.group({\r\n      email: new FormControl('', [Validators.required]),\r\n      name: new FormControl('', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      startingDate: new FormControl('', [Validators.required]),\r\n      finishDate: new FormControl('', [Validators.required]),\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n  get f() {\r\n    return this.vacationRequestForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.vacationRequestForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.zahtev = new Zahtev(\r\n      this.f.email.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.startingDate.value,\r\n      this.f.finishDate.value,\r\n      ZahtevStatus.AWAITING_APPROVAL\r\n    );\r\n\r\n    this.zahtev = new Zahtev(this.f.email.value, this.f.name.value, this.f.surname.value, this.f.startingDate.value, this.f.finishDate.value, ZahtevStatus.AWAITING_APPROVAL);\r\n\r\n    this.createVacation();\r\n\r\n  }\r\n\r\n  private createVacation() {\r\n    console.log('ovde sam');\r\n\r\n    this.vacationService.newVacation1(this.zahtev).subscribe(\r\n      data => {\r\n        console.log('unutra sam');\r\n\r\n        this.vacationService.addVacation1(this.zahtev);\r\n        this.router.navigate(['/doctor/home']);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        console.log('greska');\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS1wYWdlLWFkbWluLWNsaW5pYy9ob21lLXBhZ2UtYWRtaW4tY2xpbmljLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home-page-admin-clinic',\r\n  templateUrl: './home-page-admin-clinic.component.html',\r\n  styleUrls: ['./home-page-admin-clinic.component.css']\r\n})\r\nexport class HomePageAdminClinicComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS1wYWdlLWNsaW5pY2FsLWNlbnRyZS1hZG1pbmlzdHJhdG9yL2hvbWUtcGFnZS1jbGluaWNhbC1jZW50cmUtYWRtaW5pc3RyYXRvci5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home-page-clinical-centre-administrator',\r\n  templateUrl: './home-page-clinical-centre-administrator.component.html',\r\n  styleUrls: ['./home-page-clinical-centre-administrator.component.css']\r\n})\r\nexport class HomePageClinicalCentreAdministratorComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS1wYWdlLWRvY3Rvci9ob21lLXBhZ2UtZG9jdG9yLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home-page-doctor',\r\n  templateUrl: './home-page-doctor.component.html',\r\n  styleUrls: ['./home-page-doctor.component.css']\r\n})\r\nexport class HomePageDoctorComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS1wYWdlLW51cnNlL2hvbWUtcGFnZS1udXJzZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-home-page',\r\n  templateUrl: './home-page-nurse.component.html',\r\n  styleUrls: ['./home-page-nurse.component.css']\r\n})\r\nexport class HomePageNurseComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS1wYWdlLXBhdGllbnQvaG9tZS1wYWdlLXBhdGllbnQuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {MedicalRecordService} from '../../services/medical-record.service';\r\nimport {ExaminationService} from '../../services/examination.service';\r\nimport {User} from '../../model/user';\r\nimport {Examination} from '../../model/examination';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\n\r\n@Component({\r\n  selector: 'app-home-page-patient',\r\n  templateUrl: './home-page-patient.component.html',\r\n  styleUrls: ['./home-page-patient.component.css']\r\n})\r\nexport class HomePagePatientComponent implements OnInit {\r\n\r\n  user = this.userService.getLoggedUser();\r\n  tmp: Array<Examination>;\r\n  constructor(private examinationService: ExaminationService, private userService: UserServiceService) {\r\n    this.tmp = examinationService.getMHforP(this.user.email);\r\n    this.examinationService.setMHFP(this.tmp);\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \".image{\\r\\n  height:40em; background-size:cover; width:auto;\\r\\n  background-image:url('2.jpg');\\r\\n  background-position:50% 50%;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9ob21lL2hvbWUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVcsRUFBRSxxQkFBcUIsRUFBRSxVQUFVO0VBQzlDLDZCQUE2QjtFQUM3QiwyQkFBMkI7QUFDN0IiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2hvbWUvaG9tZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmltYWdle1xyXG4gIGhlaWdodDo0MGVtOyBiYWNrZ3JvdW5kLXNpemU6Y292ZXI7IHdpZHRoOmF1dG87XHJcbiAgYmFja2dyb3VuZC1pbWFnZTp1cmwoJzIuanBnJyk7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjo1MCUgNTAlO1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \".example-full-width {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.main-content {\\r\\n  margin: 20px 0;\\r\\n\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsY0FBYzs7QUFFaEIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXhhbXBsZS1mdWxsLXdpZHRoIHtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLm1haW4tY29udGVudCB7XHJcbiAgbWFyZ2luOiAyMHB4IDA7XHJcblxyXG59XHJcbiJdfQ== */\"","import {Component, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {Router} from '@angular/router';\r\nimport {User} from '../../model/user';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {Role} from '../../model/role';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport {ClinicService} from '../../services/clinic.service';\r\nimport {NurseServiceService} from '../../services/nurse-service.service';\r\nimport {AdminClinicService} from '../../services/admin-clinic.service';\r\nimport {ClinicalCentreAdministratorService} from '../../services/clinical-centre-administrator.service';\r\nimport {Patient} from '../../model/patient';\r\nimport {PatientStatus} from '../../model/patientStatus';\r\nimport {ExaminationService} from '../../services/examination.service';\r\nimport {MedicalRecordService} from '../../services/medical-record.service';\r\nimport {ExaminationsTypeService} from '../../services/examination-type.service';\r\nimport {MedicalRecord} from '../../model/medicalRecord';\r\nimport {Examination} from '../../model/examination';\r\n\r\nexport class LoginUser {\r\n  constructor(\r\n    public email: string,\r\n    public password: string\r\n  ) {}\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  private loginForm: FormGroup;\r\n  private submitted = false;\r\n  private user: User;\r\n  private loginUser: LoginUser;\r\n  private patient: Patient;\r\n  private MRFR: MedicalRecord;\r\n  private MHFP: Array<Examination>;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserServiceService,\r\n    private doctorService: DoctorService,\r\n    private clinicalService: ClinicService,\r\n    private nurseService: NurseServiceService,\r\n    private adminClinicService: AdminClinicService,\r\n    private clinicalCentreAdministratorService: ClinicalCentreAdministratorService,\r\n    private examinationService: ExaminationService,\r\n    private medicalRecordService: MedicalRecordService,\r\n    private examinationsTypeService: ExaminationsTypeService,\r\n\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  // Convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  private onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.loginUser = new LoginUser(\r\n      this.f.email.value,\r\n      this.f.password.value\r\n    );\r\n\r\n    // alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(this.loginForm.value));\r\n\r\n    this.user = this.userService.getUser(this.f.email.value);\r\n    this.patient = this.patientService.getPatient(this.f.email.value);\r\n    this.attemptPatientLogin();\r\n  }\r\n\r\n  public attemptPatientLogin() {\r\n    if (this.user.role === Role.PATIENT && this.loginUser.password === this.user.password && this.patient.status === PatientStatus.ACTIVATED) {\r\n      this.patientService.loginPatient(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            this.userService.setLoggedUser(this.user);\r\n            this.MRFR = this.medicalRecordService.getMRforP(this.user.email);\r\n            this.medicalRecordService.setMRFP(this.MRFR);\r\n            this.router.navigate(['/patient/home']);\r\n          } else {\r\n            alert('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.DOCTOR && this.loginUser.password === this.user.password) {\r\n      this.doctorService.loginDoctor(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            alert('Successful logged in');\r\n            this.router.navigate(['/doctor/home']);\r\n          } else {\r\n            alert('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.NURSE && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.nurseService.loginNurse(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            alert('Successful logged in');\r\n            this.router.navigate(['/nurse/home']);\r\n          } else {\r\n            alert('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.CLINIC_ADMINISTRATOR && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.adminClinicService.loginAdminClinic(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            alert('Successful logged in');\r\n            this.router.navigate(['/admin_clinic/home']);\r\n          } else {\r\n            alert('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n\r\n    } else if (this.user.role === Role.CLINICAL_CENTRE_ADMINISTRATOR && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.clinicalCentreAdministratorService.loginAdmin(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            alert('Successful logged in');\r\n            this.router.navigate(['/clinical-centre-admin/home']);\r\n          } else {\r\n            alert('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n","export default \"table {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\nth.mat-sort-header-sorted {\\r\\n  color: black;\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9tZWRpY2FsLWhpc3RvcnktcGF0aWVudC9tZWRpY2FsLWhpc3RvcnktcGF0aWVudC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsVUFBVTtFQUNWLGVBQWU7RUFDZixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBQ0E7RUFDRSxlQUFlO0VBQ2YsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixVQUFVO0FBQ1oiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL21lZGljYWwtaGlzdG9yeS1wYXRpZW50L21lZGljYWwtaGlzdG9yeS1wYXRpZW50LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XHJcbiAgd2lkdGg6IDc1JTtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbn1cclxuXHJcbnRoLm1hdC1zb3J0LWhlYWRlci1zb3J0ZWQge1xyXG4gIGNvbG9yOiBibGFjaztcclxufVxyXG4ubWF0LWZvcm0tZmllbGQge1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbiAgd2lkdGg6IDc1JTtcclxufVxyXG4iXX0= */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatDialog, MatPaginator, MatSort, MatTableDataSource} from '@angular/material';\r\nimport {Examination} from '../../model/examination';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {ExaminationService} from '../../services/examination.service';\r\nimport {User} from '../../model/user';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {ExaminationStatus} from '../../model/examinationStatus';\r\nimport {RateDoctorAndClinicPatientComponent} from '../rate-doctor-and-clinic-patient/rate-doctor-and-clinic-patient.component';\r\nimport {async} from 'q';\r\n\r\n@Component({\r\n  selector: 'app-medical-history-patient',\r\n  templateUrl: './medical-history-patient.component.html',\r\n  styleUrls: ['./medical-history-patient.component.css']\r\n})\r\nexport class MedicalHistoryPatientComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['Kind', 'Clinic', 'Doctor', 'StartTime', 'EndTime', 'Rate'];\r\n  medicalDataSource = new MatTableDataSource<Examination>();\r\n  examinations: Array<Examination> = this.examinationService.getAllExaminations();\r\n  tmp: Array<Examination> = new Array<Examination>();\r\n  loggedUser: string = this.userService.isLoggedIn();\r\n  user: User;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n  tmpStr = this.loggedUser.split(',');\r\n  tmpStr1 = this.tmpStr[0].split(':');\r\n  flag: boolean;\r\n  constructor(private patientService: PatientService, private examinationService: ExaminationService,\r\n              private userService: UserServiceService,\r\n              public dialog: MatDialog) {\r\n    this.user = JSON.parse(this.loggedUser);\r\n    this.flag = false;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    // Ovako ostavljeno posto ovako jedino radi tabela.\r\n    for (const c of this.examinations) {\r\n      if (c.status !== ExaminationStatus.PREDEF_AVAILABLE) {\r\n        if (c.patient.email === this.user.email) {\r\n          this.tmp.push(c);\r\n        }\r\n      }\r\n    }\r\n    this.medicalDataSource = new MatTableDataSource(this.tmp);\r\n  }\r\n\r\n  async rate(examination) {\r\n    this.examinationService.setExaminationForRating(examination);\r\n    this.flag = await this.examinationService.getFlagForRate(examination.id.toString());\r\n    console.log('FLAG ISPOD');\r\n    console.log(this.flag);\r\n    this.openDialog(this.flag);\r\n\r\n  }\r\n\r\n  openDialog(flag) {\r\n    if (flag === true) {\r\n      const d = this.dialog.open(RateDoctorAndClinicPatientComponent);\r\n    }\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1yZWNvcmQtZGlhbG9nL21lZGljYWwtcmVjb3JkLWRpYWxvZy5jb21wb25lbnQuY3NzIn0= */\"","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {Patient} from '../../model/patient';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {forEachComment} from 'tslint';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\r\nimport {MedicalRecord} from '../../model/medicalRecord';\r\nimport {MedicalRecordService} from '../../services/medical-record.service';\r\nimport {Nurse} from '../../model/nurse';\r\nimport {Router} from '@angular/router';\r\nimport {ExaminationReport} from '../../model/examinationReport';\r\n\r\n@Component({\r\n  selector: 'app-medical-record-dialog',\r\n  templateUrl: './medical-record-dialog.component.html',\r\n  styleUrls: ['./medical-record-dialog.component.css']\r\n})\r\nexport class MedicalRecordDialogComponent implements OnInit {\r\n  medicalRecord: MedicalRecord;\r\n  submitted = false;\r\n  records: Array<MedicalRecord>;\r\n  record: Patient;\r\n  medicalRecordForm: FormGroup;\r\n  examinationReport: ExaminationReport;\r\n  comm = '';\r\n  constructor(private formBuilder: FormBuilder,\r\n              private patientService: PatientService,\r\n              private dialogRef: MatDialogRef<MedicalRecordDialogComponent>,\r\n              private medicalService: MedicalRecordService,\r\n              private router: Router,\r\n              @Inject(MAT_DIALOG_DATA) data) {\r\n\r\n    this.records = medicalService.getAllMedicalRecords();\r\n    this.record = patientService.getPatient1();\r\n    this.setAll();\r\n    this.medicalRecord = medicalService.getMedicalRecordForDialog();\r\n    console.log('blabla');\r\n    console.log(this.medicalRecord);\r\n\r\n    this.examinationReport = medicalService.getExaminationReportForPatient();\r\n  //  this.comm = this.examinationReport.comment;\r\n    console.log('komentar');\r\n    console.log(this.examinationReport);\r\n  }\r\n\r\n  ngOnInit() {\r\n    // this.setAll();\r\n\r\n    this.medicalRecordForm = this.formBuilder.group({\r\n      height: new FormControl(this.medicalRecord.height),\r\n      weight: new FormControl(this.medicalRecord.weight),\r\n      bloodType: new FormControl(this.medicalRecord.bloodType),\r\n      allergies: new FormControl(this.medicalRecord.allergies),\r\n      reports: new FormControl(this.examinationReport),\r\n\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.medicalRecordForm.controls;\r\n  }\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.medicalRecordForm.invalid) {\r\n      return;\r\n    }\r\n  //  this.medicalRecord.set(this.f.height.value, this.f.weight.value, this.f.bloodType.value, this.f.allergies.value)\r\n    this.medicalRecord.height = this.f.height.value;\r\n    this.medicalRecord.weight = this.f.weight.value;\r\n    this.medicalRecord.bloodType = this.f.bloodType.value;\r\n    this.medicalRecord.allergies = this.f.allergies.value;\r\n    this.medicalRecord.examinationReports = this.f.reports.value;\r\n    console.log(this.medicalRecord);\r\n\r\n    this.editMedicalRecord();\r\n    this.dialogRef.close(this.medicalRecord);\r\n    for (const c in ExaminationReport) {\r\n\r\n    }\r\n  }\r\n\r\n  private editMedicalRecord() {\r\n    this.medicalService.editMedicalRecord(this.medicalRecord).subscribe(\r\n      data => {\r\n        this.medicalService.setMedicalRecord(this.medicalRecord);\r\n        this.router.navigate(['/doctor/MedicalRecord']);\r\n      },\r\n      error => {\r\n        alert('Error edit Medical record');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  setAll() {\r\n    for (const c of this.records) {\r\n      if (c.patient.email === this.record.email) {\r\n        this.medicalRecord = c;\r\n        // Ovde da se otkomentarise kad se doda reports iz baza u klasu medicalRecord\r\n        // for (const r of this.mr.reports) {\r\n        // this.reports = r.comment + ' ';\r\n        // }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","export default \".mat-input-placeholder {\\r\\n  size: auto;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9tZWRpY2FsLXJlY29yZC1wYXRpZW50L21lZGljYWwtcmVjb3JkLXBhdGllbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFVBQVU7QUFDWiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1yZWNvcmQtcGF0aWVudC9tZWRpY2FsLXJlY29yZC1wYXRpZW50LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubWF0LWlucHV0LXBsYWNlaG9sZGVyIHtcclxuICBzaXplOiBhdXRvO1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport {MedicalRecord} from '../../model/medicalRecord';\r\nimport {MedicalRecordService} from '../../services/medical-record.service';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {User} from '../../model/user';\r\n\r\n@Component({\r\n  selector: 'app-medical-record-patient',\r\n  templateUrl: './medical-record-patient.component.html',\r\n  styleUrls: ['./medical-record-patient.component.css']\r\n})\r\nexport class MedicalRecordPatientComponent implements OnInit {\r\n\r\n  height = 0;\r\n  weight = 0;\r\n  bloodType = '';\r\n  allergies = '';\r\n  reports = '';\r\n  records: Array<MedicalRecord> = new Array<MedicalRecord>();\r\n  loggedUser: string = this.userService.isLoggedIn();\r\n  user: User;\r\n  mr: MedicalRecord;\r\n  constructor(private medicalRecordService: MedicalRecordService, private userService: UserServiceService) {\r\n    this.mr = medicalRecordService.getMRFP();\r\n    this.user = JSON.parse(this.loggedUser);\r\n    this.setAll();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.setAll();\r\n  }\r\n\r\n  setAll() {\r\n    if (this.mr !== null) {\r\n      this.height = this.mr.height;\r\n      this.weight = this.mr.weight;\r\n      this.bloodType = this.mr.bloodType;\r\n      this.allergies = this.mr.allergies;\r\n      for (const r of this.mr.examinationReports) {\r\n        this.reports = r.comment + '\\n';\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","export default \"div {\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\ntable {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\nmat-paginator {\\r\\n  width: 75%;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #777;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: -webkit-box;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-name {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9tZWRpY2FtZW50cy9tZWRpY2FtZW50cy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBVzs7QUFFYjs7QUFFQTtFQUNFLFVBQVU7RUFDVixlQUFlO0VBQ2YsaUJBQWlCOztBQUVuQjs7QUFDQTtFQUNFLGVBQWU7RUFDZixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLFVBQVU7QUFDWjs7QUFDQTtFQUNFLFVBQVU7RUFDVixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxTQUFTO0FBQ1g7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsb0JBQWE7RUFBYixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsdUJBQXVCO0VBQ3ZCLFlBQVk7RUFDWixvQkFBb0I7RUFDcEIsYUFBYTtFQUNiLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsWUFBWTtBQUNkIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9tZWRpY2FtZW50cy9tZWRpY2FtZW50cy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiZGl2IHtcclxuICB3aWR0aDogMTAwJTtcclxuXHJcbn1cclxuXHJcbnRhYmxlIHtcclxuICB3aWR0aDogNzUlO1xyXG4gIG1hcmdpbi10b3A6NTBweDtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxuXHJcbn1cclxuLm1hdC1mb3JtLWZpZWxkIHtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgbWFyZ2luLXRvcDo1MHB4O1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG4gIHdpZHRoOiA3NSU7XHJcbn1cclxubWF0LXBhZ2luYXRvciB7XHJcbiAgd2lkdGg6IDc1JTtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxufVxyXG5cclxudHIuZXhhbXBsZS1kZXRhaWwtcm93IHtcclxuICBoZWlnaHQ6IDA7XHJcbn1cclxuXHJcbnRyLmV4YW1wbGUtZWxlbWVudC1yb3c6bm90KC5leGFtcGxlLWV4cGFuZGVkLXJvdyk6aG92ZXIge1xyXG4gIGJhY2tncm91bmQ6ICM3Nzc7XHJcbn1cclxuXHJcbnRyLmV4YW1wbGUtZWxlbWVudC1yb3c6bm90KC5leGFtcGxlLWV4cGFuZGVkLXJvdyk6YWN0aXZlIHtcclxuICBiYWNrZ3JvdW5kOiAjZWZlZmVmO1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LXJvdyB0ZCB7XHJcbiAgYm9yZGVyLWJvdHRvbS13aWR0aDogMDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kZXRhaWwge1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kaWFncmFtIHtcclxuICBtaW4td2lkdGg6IDgwcHg7XHJcbiAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XHJcbiAgcGFkZGluZzogOHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBsaWdodGVyO1xyXG4gIG1hcmdpbjogOHB4IDA7XHJcbiAgaGVpZ2h0OiAxMDRweDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1uYW1lIHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBmb250LXNpemU6IDQwcHg7XHJcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kZXNjcmlwdGlvbiB7XHJcbiAgcGFkZGluZzogMTZweDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kZXNjcmlwdGlvbi1hdHRyaWJ1dGlvbiB7XHJcbiAgb3BhY2l0eTogMC41O1xyXG59XHJcblxyXG4iXX0= */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Nurse} from '../../model/nurse';\r\nimport {User} from '../../model/user';\r\nimport {Router} from '@angular/router';\r\nimport {NurseServiceService} from '../../services/nurse-service.service';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {Role} from '../../model/role';\r\nimport {Medicaments} from '../../model/Medicaments';\r\nimport {MedicamentsService} from '../../services/medicaments.service';\r\nimport {MatPaginator, MatTableDataSource} from '@angular/material';\r\nimport {Clinic} from '../../model/clinic';\r\n\r\n@Component({\r\n  selector: 'app-medicaments',\r\n  templateUrl: './medicaments.component.html',\r\n  styleUrls: ['./medicaments.component.css']\r\n})\r\nexport class MedicamentsComponent implements OnInit {\r\n\r\n  addMedicamentForm: FormGroup;\r\n  submitted = false;\r\n  medicaments: Array<Medicaments> = new Array<Medicaments>();\r\n  medicament: Medicaments;\r\n  dataSource = new MatTableDataSource<Medicaments>();\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  displayedColumns = ['id', 'title', 'description', 'strenght'];\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private medicamentService: MedicamentsService,\r\n              private  userService: UserServiceService) {\r\n\r\n    this.medicaments = this.medicamentService.getAllMedicaments();\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.addMedicamentForm = this.formBuilder.group({\r\n\r\n      id: new FormControl('', [Validators.required]),\r\n      title: new FormControl('', [Validators.required]),\r\n      description: new FormControl('', [Validators.required]),\r\n      strenght: new FormControl('', [Validators.required]),\r\n    });\r\n\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  get f() {\r\n    return this.addMedicamentForm.controls;\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.addMedicamentForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.medicament = new Medicaments(\r\n      this.f.id.value,\r\n      this.f.title.value,\r\n      this.f.description.value,\r\n      this.f.strenght.value,\r\n    );\r\n\r\n    this.medicament = new Medicaments(this.f.id.value,\r\n      this.f.title.value,\r\n      this.f.description.value,\r\n      this.f.strenght.value);\r\n    this.createMedicament();\r\n  }\r\n\r\n  private createMedicament() {\r\n    this.medicamentService.newMedicament(this.medicament).subscribe(\r\n      data => {\r\n        this.medicamentService.addMedicament(this.medicament);\r\n        this.router.navigate(['/clinical-centre-admin/home']);\r\n      },\r\n      error => {\r\n        alert('Error adding medicament');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.dataSource = new MatTableDataSource<Medicaments>(this.medicamentService.getAllMedicaments());\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtZGF0ZS1waWNrZXIvbnVyc2UtZGF0ZS1waWNrZXIuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-date-picker',\r\n  templateUrl: './nurse-date-picker.component.html',\r\n  styleUrls: ['./nurse-date-picker.component.css']\r\n})\r\nexport class NurseDatePickerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n/** @title Basic datepicker */\r\n\r\n\r\n","export default \"div {\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\ntable {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\nmat-paginator {\\r\\n  width: 75%;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #777;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: -webkit-box;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-name {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9udXJzZS1saXN0LXBhdGllbnQvbnVyc2UtbGlzdC1wYXRpZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFXOztBQUViOztBQUVBO0VBQ0UsVUFBVTtFQUNWLGVBQWU7RUFDZixpQkFBaUI7O0FBRW5COztBQUNBO0VBQ0UsZUFBZTtFQUNmLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsVUFBVTtBQUNaOztBQUNBO0VBQ0UsVUFBVTtFQUNWLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixvQkFBYTtFQUFiLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGVBQWU7RUFDZix1QkFBdUI7RUFDdkIsWUFBWTtFQUNaLG9CQUFvQjtFQUNwQixhQUFhO0VBQ2IsYUFBYTtBQUNmOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGVBQWU7RUFDZixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxZQUFZO0FBQ2QiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL251cnNlLWxpc3QtcGF0aWVudC9udXJzZS1saXN0LXBhdGllbnQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImRpdiB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcblxyXG59XHJcblxyXG50YWJsZSB7XHJcbiAgd2lkdGg6IDc1JTtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcblxyXG59XHJcbi5tYXQtZm9ybS1maWVsZCB7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIG1hcmdpbi10b3A6NTBweDtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxuICB3aWR0aDogNzUlO1xyXG59XHJcbm1hdC1wYWdpbmF0b3Ige1xyXG4gIHdpZHRoOiA3NSU7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbn1cclxuXHJcbnRyLmV4YW1wbGUtZGV0YWlsLXJvdyB7XHJcbiAgaGVpZ2h0OiAwO1xyXG59XHJcblxyXG50ci5leGFtcGxlLWVsZW1lbnQtcm93Om5vdCguZXhhbXBsZS1leHBhbmRlZC1yb3cpOmhvdmVyIHtcclxuICBiYWNrZ3JvdW5kOiAjNzc3O1xyXG59XHJcblxyXG50ci5leGFtcGxlLWVsZW1lbnQtcm93Om5vdCguZXhhbXBsZS1leHBhbmRlZC1yb3cpOmFjdGl2ZSB7XHJcbiAgYmFja2dyb3VuZDogI2VmZWZlZjtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1yb3cgdGQge1xyXG4gIGJvcmRlci1ib3R0b20td2lkdGg6IDA7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGV0YWlsIHtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGlhZ3JhbSB7XHJcbiAgbWluLXdpZHRoOiA4MHB4O1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1xyXG4gIHBhZGRpbmc6IDhweDtcclxuICBmb250LXdlaWdodDogbGlnaHRlcjtcclxuICBtYXJnaW46IDhweCAwO1xyXG4gIGhlaWdodDogMTA0cHg7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtbmFtZSB7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgZm9udC1zaXplOiA0MHB4O1xyXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGVzY3JpcHRpb24ge1xyXG4gIHBhZGRpbmc6IDE2cHg7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGVzY3JpcHRpb24tYXR0cmlidXRpb24ge1xyXG4gIG9wYWNpdHk6IDAuNTtcclxufVxyXG5cclxuIl19 */\"","import {Component, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {Patient} from '../../model/patient';\r\nimport {MatDialog, MatPaginator, MatTableDataSource} from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-nurse-list-patient',\r\n  templateUrl: './nurse-list-patient.component.html',\r\n  styleUrls: ['./nurse-list-patient.component.css']\r\n})\r\nexport class NurseListPatientComponent implements OnInit {\r\n\r\n  patient: Patient;\r\n  displayedColumns: string[] = ['name', 'surname', 'insuranceID'];\r\n  dataSource = new MatTableDataSource<Patient>();\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  expandedElement: Patient;\r\n  patients: Array<Patient> = new Array<Patient>();\r\n  constructor(\r\n    private patientService: PatientService,\r\n\r\n  ) {\r\n\r\n    this.patients = this.patientService.getAllPatients();\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.dataSource = new MatTableDataSource<Patient>(this.patientService.getAllPatients());\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtcHJvZmlsZS9udXJzZS1wcm9maWxlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Nurse} from '../../model/nurse';\r\nimport {User} from '../../model/user';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {Router} from '@angular/router';\r\nimport {NurseServiceService} from '../../services/nurse-service.service';\r\nimport {Role} from '../../model/role';\r\n\r\n@Component({\r\n  selector: 'app-nurse-profile',\r\n  templateUrl: './nurse-profile.component.html',\r\n  styleUrls: ['./nurse-profile.component.css']\r\n})\r\nexport class NurseProfileComponent implements OnInit {\r\n\r\n  nurseProfileForm: FormGroup;\r\n  submitted = false;\r\n  nurse: Nurse;\r\n  selectedNurse: Nurse;\r\n  user: User;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private nurseService: NurseServiceService,\r\n              private  userService: UserServiceService) {\r\n    this.user = JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedNurse = nurseService.getNurse(this.user.email);\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    this.nurseProfileForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedNurse.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedNurse.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedNurse.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedNurse.surname, [Validators.required]),\r\n      phone: new FormControl(this.selectedNurse.phone, [Validators.required]),\r\n      workHoursFrom: new FormControl(this.selectedNurse.workHoursFrom, [Validators.required]),\r\n      workHoursTo: new FormControl(this.selectedNurse.workHoursTo, [Validators.required]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.nurseProfileForm.controls;\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.nurseProfileForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.nurse = new Nurse(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.phone.value,\r\n      this.f.workHoursFrom.value,\r\n      this.f.workHoursTo.value,\r\n    );\r\n\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.NURSE);\r\n\r\n    this.editNurse();\r\n  }\r\n\r\n  private editNurse() {\r\n    this.nurseService.editNurse(this.nurse).subscribe(\r\n      data => {\r\n        this.userService.setUser(this.user);\r\n        this.nurseService.setNurse(this.nurse);\r\n        this.router.navigate(['/nurse/home']);\r\n      },\r\n      error => {\r\n        alert('Error edit nurse');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtdmFjYXRpb24tcmVxdWVzdC9udXJzZS12YWNhdGlvbi1yZXF1ZXN0LmNvbXBvbmVudC5jc3MifQ== */\"","import {Component, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {MatDialog} from '@angular/material';\r\nimport {Router} from '@angular/router';\r\nimport {Zahtev} from '../../model/Zahtev';\r\nimport {VacationService} from '../../services/vacation.service';\r\nimport {ZahtevStatus} from '../../model/ZahtevStatus';\r\n\r\n@Component({\r\n  selector: 'app-nurse-vacation-request',\r\n  templateUrl: './nurse-vacation-request.component.html',\r\n  styleUrls: ['./nurse-vacation-request.component.css']\r\n})\r\nexport class NurseVacationRequestComponent implements OnInit {\r\n\r\n  vacationRequestForm: FormGroup;\r\n  submitted = false;\r\n  zahtev: Zahtev;\r\n\r\n  constructor(public dialog: MatDialog,\r\n              private formBuilder: FormBuilder,\r\n              private router: Router,\r\n              private vacationService: VacationService,\r\n              ) {}\r\n\r\n\r\n  ngOnInit() {\r\n    this.vacationRequestForm = this.formBuilder.group({\r\n      email: new FormControl('', [Validators.required]),\r\n      name: new FormControl('', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      startingDate: new FormControl('', [Validators.required]),\r\n      finishDate: new FormControl('', [Validators.required]),\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n  get f() {\r\n    return this.vacationRequestForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.vacationRequestForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.zahtev = new Zahtev(\r\n      this.f.email.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.startingDate.value,\r\n      this.f.finishDate.value,\r\n      ZahtevStatus.AWAITING_APPROVAL\r\n    );\r\n\r\n    // tslint:disable-next-line:max-line-length\r\n    this.zahtev = new Zahtev(this.f.email.value, this.f.name.value, this.f.surname.value, this.f.startingDate.value, this.f.finishDate.value, ZahtevStatus.AWAITING_APPROVAL);\r\n\r\n    this.createVacation();\r\n\r\n  }\r\n\r\n  private createVacation() {\r\n    console.log('ovde sam');\r\n\r\n    this.vacationService.newVacation(this.zahtev).subscribe(\r\n      data => {\r\n        console.log('unutra sam');\r\n\r\n        this.vacationService.addVacation(this.zahtev);\r\n        this.router.navigate(['/nurse/home']);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        console.log('greska');\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1tYWtlLWV4YW1pbmF0aW9uL3BhdGllbnQtbWFrZS1leGFtaW5hdGlvbi5jb21wb25lbnQuY3NzIn0= */\"","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\r\nimport {Doctor} from '../../model/doctor';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport {ExaminationService} from '../../services/examination.service';\r\nimport {Patient} from '../../model/patient';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {User} from '../../model/user';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {ClinicService} from '../../services/clinic.service';\r\nimport {Clinic} from '../../model/clinic';\r\nimport {AdminClinicStatus} from '../../model/adminClinicStatus';\r\nimport {AdminClinic} from '../../model/adminClinic';\r\nimport {AdminClinicService} from '../../services/admin-clinic.service';\r\n\r\n@Component({\r\n  selector: 'app-patient-make-examination',\r\n  templateUrl: './patient-make-examination.component.html',\r\n  styleUrls: ['./patient-make-examination.component.css']\r\n})\r\nexport class PatientMakeExaminationComponent implements OnInit {\r\n\r\n  MakeGroup: FormGroup;\r\n  termins: Array<string> = new Array<string>();\r\n  kinds: Array<string> = new Array<string>();\r\n  AdminClinics: Array<AdminClinic> = new Array<AdminClinic>();\r\n  doctor: Doctor;\r\n  date: string;\r\n  user: User;\r\n  clinic: Clinic;\r\n  type: string;\r\n  k = 'Examination';\r\n  adminsClinic = '';\r\n\r\n  constructor(private dialogRef: MatDialogRef<PatientMakeExaminationComponent>,\r\n              private doctorService: DoctorService,\r\n              private clinicService: ClinicService,\r\n              private formBuilder: FormBuilder,\r\n              private examinationServce: ExaminationService,\r\n              private userService: UserServiceService,\r\n              private adminClinicService: AdminClinicService,\r\n              @Inject(MAT_DIALOG_DATA) data) {\r\n      this.doctor = doctorService.getDoctorForMake();\r\n      this.date = doctorService.getDate();\r\n      this.termins = doctorService.getDoctorsTermins(this.date, this.doctor.email);\r\n      this.user = userService.getLoggedUser();\r\n      this.type = clinicService.getType();\r\n      this.clinic = clinicService.getClinicForExamination();\r\n      this.AdminClinics = adminClinicService.getAdminClinicsWithClinicId(this.clinic.id.toString());\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.MakeGroup = this.formBuilder.group({\r\n      terminTime: new FormControl(''),\r\n    });\r\n  }\r\n\r\n\r\n  get f() {\r\n    return this.MakeGroup.controls;\r\n  }\r\n\r\n  save() {\r\n    if (this.MakeGroup.invalid) {\r\n      return;\r\n    }\r\n\r\n    const interval = this.f.terminTime.value;\r\n    console.log(this.AdminClinics)\r\n    for (const a of this.AdminClinics) {\r\n      this.adminsClinic = this.adminsClinic + a.email + ',';\r\n    }\r\n\r\n    const finalAdminClinic = this.adminsClinic.substring(0, this.adminsClinic.length - 1);\r\n    console.log(finalAdminClinic);\r\n\r\n    this.examinationServce.makeExamination(interval, this.user.email, this.doctor.email, this.type, this.clinic.id.toString(), this.k, finalAdminClinic).subscribe(data => {\r\n      this.dialogRef.close();\r\n    }, error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1wcm9maWxlL3BhdGllbnQtcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Patient} from '../../model/patient';\r\nimport {Router} from '@angular/router';\r\nimport {PatientStatus} from '../../model/patientStatus';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {User} from '../../model/user';\r\nimport {Role} from '../../model/role';\r\nimport {__values} from 'tslib';\r\n\r\n@Component({\r\n  selector: 'app-patient-profile',\r\n  templateUrl: './patient-profile.component.html',\r\n  styleUrls: ['./patient-profile.component.css']\r\n})\r\nexport class PatientProfileComponent implements OnInit {\r\n\r\n  patientProfileForm: FormGroup;\r\n  submitted = false;\r\n  patient: Patient;\r\n  selectedPatient: Patient;\r\n  user: User;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private patientService: PatientService,\r\n              private  userService: UserServiceService) {\r\n    this.user = JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedPatient = patientService.getPatient(this.user.email);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.patientProfileForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedPatient.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedPatient.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedPatient.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedPatient.surname, [Validators.required]),\r\n      address: new FormControl(this.selectedPatient.address, [Validators.required]),\r\n      city: new FormControl(this.selectedPatient.city, [Validators.required]),\r\n      country: new FormControl(this.selectedPatient.country, [Validators.required]),\r\n      number: new FormControl(this.selectedPatient.number, [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl(this.selectedPatient.insuranceID, [Validators.required, Validators.minLength(13),\r\n         Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.patientProfileForm.controls;\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.patientProfileForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING_APPROVAL\r\n    );\r\n\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.PATIENT);\r\n\r\n    this.editPatient();\r\n  }\r\n\r\n  private editPatient() {\r\n    this.patientService.editPatient(this.patient).subscribe(\r\n      data => {\r\n        this.userService.setUser(this.user);\r\n        this.patientService.setPatient(this.patient);\r\n        this.router.navigate(['/patient/home']);\r\n      },\r\n      error => {\r\n        alert('Error edit patient');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"table {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9wcmVkZWYtZXhhbWluYXRpb24tZGlhbG9nL3ByZWRlZi1leGFtaW5hdGlvbi1kaWFsb2cuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7QUFDYiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcHJlZGVmLWV4YW1pbmF0aW9uLWRpYWxvZy9wcmVkZWYtZXhhbWluYXRpb24tZGlhbG9nLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuIl19 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {MatDialogRef, MatTableDataSource} from '@angular/material';\r\nimport {Examination} from '../../model/examination';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport {ExaminationService} from '../../services/examination.service';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-predef-examination-dialog',\r\n  templateUrl: './predef-examination-dialog.component.html',\r\n  styleUrls: ['./predef-examination-dialog.component.css']\r\n})\r\nexport class PredefExaminationDialogComponent implements OnInit {\r\n\r\n  ExaminationDataSource: MatTableDataSource<Examination>;\r\n  displayedColumns: string[] = ['StartDate', 'EndDate', 'DoctorName', 'DoctorSurname', 'Type', 'Price', 'Discount', 'Make'];\r\n  examinations: Array<Examination> = new Array<Examination>();\r\n\r\n  constructor(private examinationService: ExaminationService,\r\n              private userService: UserServiceService,\r\n              private dialogRef: MatDialogRef<PredefExaminationDialogComponent>) {\r\n    this.examinations = examinationService.getAllPredefExaminations();\r\n    console.log(this.examinations);\r\n    this.ExaminationDataSource = new MatTableDataSource(this.examinations);\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  make(examination) {\r\n    const id = examination.id.toLocaleString();\r\n    const user = this.userService.getLoggedUser();\r\n    this.examinationService.makePredefExamination(id, user.email).subscribe(data => {\r\n      this.examinations = this.examinationService.getAllPredefExaminations();\r\n      this.ExaminationDataSource = new MatTableDataSource(this.examinations);\r\n    }, error => {\r\n        console.log(error);\r\n    });\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmF0ZS1kb2N0b3ItYW5kLWNsaW5pYy1wYXRpZW50L3JhdGUtZG9jdG9yLWFuZC1jbGluaWMtcGF0aWVudC5jb21wb25lbnQuY3NzIn0= */\"","import {Component, Inject, OnInit} from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {Examination} from '../../model/examination';\nimport {ExaminationService} from '../../services/examination.service';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\n\n@Component({\n  selector: 'app-rate-doctor-and-clinic-patient',\n  templateUrl: './rate-doctor-and-clinic-patient.component.html',\n  styleUrls: ['./rate-doctor-and-clinic-patient.component.css']\n})\nexport class RateDoctorAndClinicPatientComponent implements OnInit {\n\n  RateFormGroup: FormGroup;\n  doctorRate = '';\n  clinicRate = '';\n  examination: Examination;\n  constructor(private formBuilder: FormBuilder,\n              private examinationService: ExaminationService,\n              private dialogRef: MatDialogRef<RateDoctorAndClinicPatientComponent>,\n              @Inject(MAT_DIALOG_DATA) data) {\n    this.examination = examinationService.getExaminationForRating();\n  }\n\n  ngOnInit() {\n    this.RateFormGroup = this.formBuilder.group({\n      doctorRating: new FormControl('', [Validators.required, Validators.minLength(1), Validators.maxLength(1),\n        Validators.pattern('[0-5]*')]),\n      clinicRating: new FormControl('', [Validators.required, Validators.minLength(1), Validators.maxLength(1),\n        Validators.pattern('[0-5]*')])\n    });\n  }\n\n  get f() {\n    return this.RateFormGroup.controls;\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  save() {\n    if (this.RateFormGroup.invalid) {\n      return;\n    }\n\n    this.doctorRate = this.f.doctorRating.value;\n    this.clinicRate = this.f.clinicRating.value;\n\n    console.log(this.doctorRate);\n    console.log(this.clinicRate);\n    this.examinationService.RateDoctorAndClinic(this.examination.id.toString(), this.doctorRate, this.clinicRate).subscribe(data => {\n      this.dialogRef.close();\n    }, error => {\n        console.log(error);\n    });\n\n  }\n\n}\n","export default \"table {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9yZWdpc3Rlci1yZXF1ZXN0cy9yZWdpc3Rlci1yZXF1ZXN0cy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsVUFBVTtFQUNWLGVBQWU7RUFDZixpQkFBaUI7O0FBRW5CIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9yZWdpc3Rlci1yZXF1ZXN0cy9yZWdpc3Rlci1yZXF1ZXN0cy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUge1xyXG4gIHdpZHRoOiA3NSU7XHJcbiAgbWFyZ2luLXRvcDo1MHB4O1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG5cclxufVxyXG4iXX0= */\"","import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {Patient} from '../../model/patient';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {PatientStatus} from '../../model/patientStatus';\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-register-requests',\r\n  templateUrl: './register-requests.component.html',\r\n  styleUrls: ['./register-requests.component.css']\r\n})\r\nexport class RegisterRequestsComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['email', 'approving'];\r\n  RequestsDataSource = new MatTableDataSource<Patient>();\r\n  p: Patient;\r\n  constructor(private patientService: PatientService, private changeDetectorRef: ChangeDetectorRef,\r\n              private router: Router) {\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.RequestsDataSource = new MatTableDataSource<Patient>(this.patientService.getAllRequests());\r\n  }\r\n\r\n  onAccept(patient) {\r\n    this.p = this.patientService.getPatient(patient.email);\r\n    this.p.status = PatientStatus.APPROVED;\r\n    this.editPatient(patient);\r\n    this.deleteRow(patient);\r\n\r\n  }\r\n\r\n  private editPatient(patient) {\r\n    this.patientService.editPatient(this.p).subscribe(\r\n      data => {\r\n        this.patientService.setPatient(this.p);\r\n        this.deleteRow(patient);\r\n        this.router.navigate(['/clinical-centre-admin/requests']);\r\n      },\r\n      error => {\r\n        alert('Error edit patient');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteRow(d) {\r\n    const index = this.RequestsDataSource.data.indexOf(d);\r\n    this.RequestsDataSource.data.splice(index, 1);\r\n  }\r\n\r\n}\r\n","export default \".example-full-width {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.main-content {\\r\\n  padding: 20px 0;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9yZWdpc3RyYXRpb24vcmVnaXN0cmF0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9yZWdpc3RyYXRpb24vcmVnaXN0cmF0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXhhbXBsZS1mdWxsLXdpZHRoIHtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLm1haW4tY29udGVudCB7XHJcbiAgcGFkZGluZzogMjBweCAwO1xyXG59XHJcbiJdfQ== */\"","import {Component, OnInit} from '@angular/core';\r\nimport {Patient} from '../../model/patient';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {PatientStatus} from '../../model/patientStatus';\r\nimport {User} from '../../model/user';\r\nimport {Role} from '../../model/role';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.css']\r\n})\r\nexport class RegistrationComponent implements OnInit {\r\n\r\n  registerForm: FormGroup;\r\n  submitted = false;\r\n  patient: Patient;\r\n  user: User;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserServiceService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formBuilder.group({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      repeatPassword: new FormControl('', [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl('', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      address: new FormControl('', [Validators.required]),\r\n      city: new FormControl('', [Validators.required]),\r\n      country: new FormControl('', [Validators.required]),\r\n      number: new FormControl('', [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl('', [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    if (this.f.password.value !== this.f.repeatPassword.value) {\r\n      alert('Repeat password must be like passoword');\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING_APPROVAL\r\n    );\r\n\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.PATIENT);\r\n\r\n    this.createPatient();\r\n  }\r\n\r\n  private createPatient() {\r\n    this.patientService.newPatient(this.patient).subscribe(\r\n      data => {\r\n        this.userService.addUser(this.user);\r\n        this.patientService.addPatient(this.patient);\r\n        this.router.navigate(['/login']);\r\n        alert('Successful register');\r\n      },\r\n      error => {\r\n        alert('Error registration');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"table {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy92YWNhdGlvbi1yZXF1ZXN0LXJlZ2lzdGVyL3ZhY2F0aW9uLXJlcXVlc3QtcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFVBQVU7RUFDVixlQUFlO0VBQ2YsaUJBQWlCOztBQUVuQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdmFjYXRpb24tcmVxdWVzdC1yZWdpc3Rlci92YWNhdGlvbi1yZXF1ZXN0LXJlZ2lzdGVyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XHJcbiAgd2lkdGg6IDc1JTtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcblxyXG59XHJcbiJdfQ== */\"","import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {Router} from '@angular/router';\r\nimport {Zahtev} from '../../model/Zahtev';\r\nimport {VacationService} from '../../services/vacation.service';\r\nimport {ZahtevStatus} from '../../model/ZahtevStatus';\r\n\r\n@Component({\r\n  selector: 'app-vacation-request-register',\r\n  templateUrl: './vacation-request-register.component.html',\r\n  styleUrls: ['./vacation-request-register.component.css']\r\n})\r\nexport class VacationRequestRegisterComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['email', 'startingDate', 'finishDate', 'approving'];\r\n  RequestsDataSource = new MatTableDataSource<Zahtev>();\r\n  p: Zahtev;\r\n  constructor(private vacationService: VacationService, private changeDetectorRef: ChangeDetectorRef,\r\n              private router: Router) {\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.RequestsDataSource = new MatTableDataSource<Zahtev>(this.vacationService.getAllRequests());\r\n  }\r\n\r\n  onAccept(zahtev) {\r\n    this.p = this.vacationService.getVacations(zahtev.email);\r\n    this.p.status = ZahtevStatus.APPROVED;\r\n    this.editVacation(zahtev);\r\n    this.deleteRow(zahtev);\r\n\r\n  }\r\n\r\n  private editVacation(zahtev) {\r\n    this.vacationService.editVacation(this.p).subscribe(\r\n      data => {\r\n        this.vacationService.setVacation(this.p);\r\n        this.deleteRow(zahtev);\r\n        this.router.navigate(['/clinical-centre-admin/VacationRequests']);\r\n      },\r\n      error => {\r\n        alert('Error edit request');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteRow(d) {\r\n    const index = this.RequestsDataSource.data.indexOf(d);\r\n    this.RequestsDataSource.data.splice(index, 1);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { CdkStepperModule } from '@angular/cdk/stepper';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n\r\n@NgModule({\r\n  exports: [\r\n    A11yModule,\r\n    CdkStepperModule,\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    DragDropModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    PortalModule,\r\n    ScrollingModule,\r\n  ]\r\n})\r\nexport class DemoMaterialModule { }\r\n","\r\nexport class ClinicalCentreAdministrator {\r\n\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  surname: string;\r\n  number: string;\r\n\r\n\r\n  constructor(email: string, password: string, name: string, surname: string, number1: string) {\r\n    this.email = email;\r\n    this.password = password;\r\n    this.name = name;\r\n    this.surname = surname;\r\n    this.number = number1;\r\n  }\r\n}\r\n","import construct = Reflect.construct;\r\n\r\nexport class Diagnose{\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n\r\n\r\n  constructor(id: number, title: string, description: string){\r\n    this.id = id;\r\n    this.title = title;\r\n    this.description = description;\r\n  }\r\n}\r\n\r\n","import {parseJsonSchemaToCommandDescription} from '@angular/cli/utilities/json-schema';\r\n\r\nexport class Medicaments{\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  strenght: string;\r\n\r\n  constructor(id: number, title: string, description: string, strenght: string){\r\n    this.id = id;\r\n    this.title = title;\r\n    this.description = description;\r\n    this.strenght = strenght;\r\n}\r\n}\r\n","import {Clinic} from './clinic';\r\nimport {Doctor} from './doctor';\r\nimport {ZahtevStatus} from './ZahtevStatus';\r\n\r\nexport class Zahtev {\r\n\r\n  email: string;\r\n  name: string;\r\n  surname: string;\r\n  startingDate: string;\r\n  finishDate: string;\r\n // doctor: Doctor;\r\n  status: ZahtevStatus;\r\n  constructor(email: string, name: string, surname: string, startingDate: string, finishDate: string, status: ZahtevStatus) {\r\n\r\n    this.email = email;\r\n    this.name = name;\r\n    this.surname = surname;\r\n    this.startingDate = startingDate;\r\n    this.finishDate = finishDate;\r\n   // this.doctor = doctor;\r\n    this.status = status;\r\n  }\r\n}\r\n","export enum ZahtevStatus {\r\n  AWAITING_APPROVAL,\r\n  APPROVED\r\n}\r\n","import {AdminClinicStatus} from './adminClinicStatus';\r\nimport {Clinic} from './clinic';\r\n\r\nexport class AdminClinic {\r\n\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  surname: string;\r\n  number: string;\r\n  status: AdminClinicStatus;\r\n  clinic: Clinic;\r\n\r\n  constructor(email: string, password: string, name: string, surname: string, number1: string, clinic?: Clinic, status?: AdminClinicStatus) {\r\n    this.email = email;\r\n    this.password = password;\r\n    this.name = name;\r\n    this.surname = surname;\r\n    this.number = number1;\r\n    this.status = status;\r\n    this.clinic = clinic;\r\n  }\r\n}\r\n\r\n","export enum AdminClinicStatus {\r\n  ACTIVE,\r\n  DELETED\r\n}\r\n","import {Doctor} from './doctor';\r\nimport {ExaminationType} from './examinationType';\r\n\r\nexport class Clinic {\r\n  id: number;\r\n  name: string;\r\n  address: string;\r\n  description: string;\r\n  clinicRating: number;\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n  types: Array<ExaminationType> = new Array<ExaminationType>();\r\n\r\n  constructor(name: string, address: string, description: string, doctors: Array<Doctor>, types?: Array<ExaminationType>, clinicRating?: number, id?: number) {\r\n    this.name = name;\r\n    this.address = address;\r\n    this.description = description;\r\n    this.doctors = doctors;\r\n    this.clinicRating = clinicRating;\r\n    this.types = types;\r\n    this.id = id;\r\n  }\r\n}\r\n","import {Clinic} from './clinic';\r\nimport {ExaminationType} from './examinationType';\r\n\r\nexport class Doctor {\r\n\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  surname: string;\r\n  phone: string;\r\n  workHoursFrom: string;\r\n  workHoursTo: string;\r\n  clinic: Clinic;\r\n  doctorRating: number;\r\n  specialized: ExaminationType;\r\n\r\n  constructor(email: string, password: string, name: string, surname: string, number1: string, workHoursFrom: string, workHoursTo: string, specialized?: ExaminationType, doctorRating?: number, clinic?: Clinic) {\r\n    this.email = email;\r\n    this.password = password;\r\n    this.name = name;\r\n    this.surname = surname;\r\n    this.phone = number1;\r\n    this.workHoursFrom = workHoursFrom;\r\n    this.workHoursTo = workHoursTo;\r\n    this.doctorRating = doctorRating;\r\n    this.specialized = specialized;\r\n    this.clinic = clinic;\r\n  }\r\n}\r\n","import {ExaminationKind} from './examinationKind';\r\nimport {ExaminationStatus} from './examinationStatus';\r\nimport {ExaminationType} from './examinationType';\r\nimport {Doctor} from './doctor';\r\nimport {Nurse} from './nurse';\r\nimport {Clinic} from './clinic';\r\nimport {Patient} from './patient';\r\nimport {Interval} from './interval';\r\n\r\nexport class Examination {\r\n\r\n  kind: ExaminationKind;\r\n  status: ExaminationStatus;\r\n  examinationType: ExaminationType;\r\n  discount: number;\r\n  doctorRating: number;\r\n  clinicRating: number;\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n  nurse: Nurse;\r\n  clinic: Clinic;\r\n  patient: Patient;\r\n  id: number;\r\n  interval: Interval;\r\n  constructor(kind: ExaminationKind, status: ExaminationStatus, examinationType: ExaminationType, discount: number,\r\n              doctorRating: number, clinicRating: number, nurse: Nurse,\r\n              clinic: Clinic, patient: Patient, doctors: Array<Doctor>, id: number, interval?: Interval) {\r\n    this.kind = kind;\r\n    this.status = status;\r\n    this.examinationType = examinationType;\r\n    this.discount = discount;\r\n    this.doctorRating = doctorRating;\r\n    this.clinicRating = clinicRating;\r\n    this.nurse = nurse;\r\n    this.clinic = clinic;\r\n    this.patient = patient;\r\n    this.doctors = doctors;\r\n    this.id = id;\r\n    this.interval = interval;\r\n  }\r\n\r\n}\r\n","export enum ExaminationKind {\r\n  EXAMINATION,\r\n  OPERATION\r\n}\r\n","export class ExaminationReport {\r\n  id: number;\r\n  comment: string;\r\n\r\n  constructor(id: number, comment: string) {\r\n    this.id = id;\r\n    this.comment = comment;\r\n  }\r\n}\r\n","export enum ExaminationStatus {\r\n  APPROVED,\r\n  AWAITING,\r\n  PREDEF_BOOKED,\r\n  PREDEF_AVAILABLE\r\n}\r\n","import {Clinic} from './clinic';\r\n\r\nexport class ExaminationType {\r\n\r\n  label: string;\r\n  price: number;\r\n\r\n  constructor(label: string, price: number) {\r\n    this.label = label;\r\n    this.price = price;\r\n  }\r\n}\r\n","import {Patient} from './patient';\r\nimport {ExaminationReport} from './examinationReport';\r\n\r\nexport class MedicalRecord {\r\n  id: number;\r\n  height: number;\r\n  weight: number;\r\n  bloodType: string;\r\n  allergies: string;\r\n  patient: Patient;\r\n  examinationReports: Array<ExaminationReport> = new Array<ExaminationReport>();\r\n\r\n  constructor(id: number, height: number, weight: number, bloodType: string, allergies: string, patient: Patient, examinationReports?: Array<ExaminationReport>) {\r\n    this.id = id;\r\n    this.height = height;\r\n    this.weight = weight;\r\n    this.bloodType = bloodType;\r\n    this.allergies = allergies;\r\n    this.patient = patient;\r\n    this.examinationReports = examinationReports;\r\n  }\r\n\r\n  public set(height: number, weight: number, bloodType: string, allergies: string, examinationReports?: Array<ExaminationReport>) {\r\n    this.height = height;\r\n    this.weight = weight;\r\n    this.bloodType = bloodType;\r\n    this.allergies = allergies;\r\n    this.examinationReports = examinationReports;\r\n  }\r\n}\r\n","import {TimeInterval} from 'rxjs';\r\nimport {Time} from '@angular/common';\r\n\r\nexport class Nurse {\r\n\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  surname: string;\r\n  phone: string;\r\n  workHoursTo: Time;\r\n  workHoursFrom: Time;\r\n\r\n  constructor(email: string, password: string, name: string, surname: string, phone: string, worhHoursTo: Time, worhHoursFrom: Time) {\r\n    this.email = email;\r\n    this.password = password;\r\n    this.name = name;\r\n    this.surname = surname;\r\n    this.phone = phone;\r\n    this.workHoursFrom = worhHoursFrom;\r\n    this.workHoursTo = worhHoursTo;\r\n\r\n  }\r\n\r\n}\r\n","import {PatientStatus} from './patientStatus';\r\nimport {Examination} from './examination';\r\n\r\nexport class Patient {\r\n\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  surname: string;\r\n  number: string;\r\n  address: string;\r\n  city: string;\r\n  country: string;\r\n  insuranceID: string;\r\n  status: PatientStatus;\r\n\r\n  constructor(email: string, password: string, name: string, surname: string, number1: string, address: string, city: string,\r\n              country: string, insuranceId: string, status: PatientStatus) {\r\n\r\n      this.email = email;\r\n      this.password = password;\r\n      this.name = name;\r\n      this.surname = surname;\r\n      this.number = number1;\r\n      this.address = address;\r\n      this.country = country;\r\n      this.city = city;\r\n      this.insuranceID = insuranceId;\r\n      this.status = status;\r\n  }\r\n}\r\n\r\n\r\n","\r\nexport enum PatientStatus {\r\n  ACTIVATED,\r\n  AWAITING_APPROVAL,\r\n  APPROVED\r\n}\r\n","export enum Role {\r\n\r\n  PATIENT,\r\n  DOCTOR,\r\n  NURSE,\r\n  CLINIC_ADMINISTRATOR,\r\n  CLINICAL_CENTRE_ADMINISTRATOR,\r\n  NONE\r\n}\r\n","import {Role} from './role';\r\n\r\nexport class User {\r\n\r\n  email: string;\r\n  password: string;\r\n  role: Role;\r\n\r\n  constructor(email: string, password: string, role: Role) {\r\n    this.email = email;\r\n    this.password = password;\r\n    this.role = role;\r\n  }\r\n\r\n  public setAll(email: string, password: string, role: Role) {\r\n    this.email = email;\r\n    this.password = password;\r\n    this.role = role;\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {AdminClinic} from '../model/adminClinic';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {Patient} from '../model/patient';\r\nimport {AdminClinicStatus} from '../model/adminClinicStatus';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminClinicService {\r\n\r\n  urlAdminClinic = environment.baseUrl + environment.adminClinic;\r\n  listAdminClinic: Array<AdminClinic> = new Array<AdminClinic>();\r\n  adminClinic: AdminClinic;\r\n  editAC: AdminClinic;\r\n  adminClinicsWithClinicId: Array<AdminClinic> = new Array<AdminClinic>();\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserServiceService\r\n  ) {\r\n    this.getAllClinicAdmins();\r\n  }\r\n\r\n  public loginAdminClinic(adminClinic) {\r\n    this.userService.setToken(adminClinic);\r\n    return this.http.post(environment.baseUrl + '/login', adminClinic, {responseType: 'text'});\r\n  }\r\n\r\n  public editAdminClinic(adminClinic) {\r\n    return this.http.post(this.urlAdminClinic + '/edit', adminClinic, {responseType: 'text'});\r\n  }\r\n\r\n  public getAdminClinic(email: string) {\r\n    if ( this.listAdminClinic.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listAdminClinic) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setAdminClinic(ac: AdminClinic) {\r\n    for (const ac1 of this.listAdminClinic) {\r\n      if (ac1.email === ac.email) {\r\n        ac1.password = ac.password;\r\n        ac1.name = ac.name;\r\n        ac1.surname = ac.surname;\r\n        ac1. number = ac.number;\r\n      }\r\n    }\r\n  }\r\n\r\n  public addClinicAdmin(a: AdminClinic) {\r\n    if (this.getAdminClinic(a.email) === null) {\r\n      this.listAdminClinic.push(a);\r\n    }\r\n  }\r\n\r\n  public whichStatus(status: string) {\r\n    if (status === 'ACTIVE') {\r\n      return AdminClinicStatus.ACTIVE;\r\n    } else {\r\n      return  AdminClinicStatus.DELETED;\r\n    }\r\n  }\r\n\r\n  public getAllClinicAdmins(): Array<AdminClinic> {\r\n    this.http.get(this.urlAdminClinic + '/all').subscribe((data: AdminClinic[]) => {\r\n        for (const c of data) {\r\n          this.adminClinic = new AdminClinic(c.email, c.password, c.name, c.surname, c.number, c.clinic, this.whichStatus(c.status.toString()));\r\n          this.addClinicAdmin(this.adminClinic);\r\n          console.log(c);\r\n          console.log('Ispod admin klinike');\r\n          console.log(this.adminClinic);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listAdminClinic;\r\n  }\r\n\r\n  public newAdminClinic(adminClinic) {\r\n    return this.http.post(this.urlAdminClinic + '/clinical-centre-admin/addAdmins', adminClinic);\r\n  }\r\n\r\n  public addAdminClinic(ac: AdminClinic) {\r\n    if (this.getAdminClinic(ac.email) === null) {\r\n      this.listAdminClinic.push(ac);\r\n    }\r\n  }\r\n\r\n  public getAdminClinicsWithClinicId(id: string): AdminClinic[] {\r\n    let params = new HttpParams();\r\n    params = params.append('id', id);\r\n    this.http.get(this.urlAdminClinic + '/adminClinicsWithClinicId', {params}).subscribe((data: AdminClinic[]) => {\r\n          this.adminClinicsWithClinicId = data;\r\n          console.log('Admin clinic get ispod');\r\n          console.log(this.adminClinicsWithClinicId);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.adminClinicsWithClinicId;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {Clinic} from '../model/clinic';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {Patient} from '../model/patient';\r\nimport {ExaminationsTypeService} from './examination-type.service';\r\nimport {ExaminationType} from '../model/examinationType';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClinicService {\r\n\r\n  urlClinic = environment.baseUrl + environment.clinic;\r\n  listClinics: Array<Clinic> = new Array<Clinic>();\r\n  clinic: Clinic;\r\n  clinicsTypes: Array<Clinic> = new Array<Clinic>();\r\n  type: string;\r\n  clinicForExamination: Clinic;\r\n  examinationTypes: Array<ExaminationType> = new Array<ExaminationType>();\r\n  constructor( private http: HttpClient, private examinationTypeService: ExaminationsTypeService) {\r\n    this.examinationTypes = examinationTypeService.getAllTypes();\r\n    this.getAllClinics();\r\n  }\r\n\r\n  public addClinic(c: Clinic) {\r\n    if (this.getClinic(c.name) === null) {\r\n      this.listClinics.push(c);\r\n    }\r\n  }\r\n\r\n  public getClinic(name: string) {\r\n    if ( this.listClinics.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listClinics) {\r\n      if ( u.name === name) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getClinicByName(name) {\r\n    return this.http.get(this.urlClinic + '/' + name);\r\n  }\r\n\r\n  public getAllClinics(): Array<Clinic> {\r\n    this.http.get(this.urlClinic + '/all').subscribe((data: Clinic[]) => {\r\n      for (const c of data) {\r\n        this.clinic = new Clinic(c.name, c.address, c.description, c.doctors , c.types, c.clinicRating, c.id);\r\n        this.addClinic(this.clinic);\r\n      }\r\n    },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.listClinics;\r\n  }\r\n\r\n  public newClinic(clinic) {\r\n    return this.http.post(this.urlClinic + '/clinical-centre-admin/addClinic', clinic);\r\n  }\r\n  public getClinicsWithType(type: string, date: string): Array<Clinic> {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('type', type);\r\n    params = params.append('date', date);\r\n    this.clinicsTypes = new Array<Clinic>();\r\n    this.http.get(this.urlClinic + '/allWithTypes', {params}).subscribe((data: Clinic[]) => {\r\n        for (const c of data) {\r\n          this.clinic = new Clinic(c.name, c.address, c.description, c.doctors , c.types, c.clinicRating, c.id);\r\n          this.clinicsTypes.push(this.clinic);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.clinicsTypes;\r\n  }\r\n\r\n  public getClinicsWithTypes() {\r\n    return this.clinicsTypes;\r\n  }\r\n\r\n  public setType(type: string) {\r\n    this.type = type;\r\n  }\r\n\r\n  public getType() {\r\n    return this.type;\r\n  }\r\n\r\n  public setClinicForExamination(clinic: Clinic) {\r\n    this.clinicForExamination = clinic;\r\n  }\r\n\r\n  public getClinicForExamination() {\r\n    return this.clinicForExamination;\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {ClinicalCentreAdministrator} from '../model/ClinicalCentreAdministrator';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {Doctor} from '../model/doctor';\r\nimport {Patient} from '../model/patient';\r\nimport {PatientStatus} from '../model/patientStatus';\r\nimport {PatientService} from './patient.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClinicalCentreAdministratorService {\r\n\r\n  urlAdmin = environment.baseUrl + environment.ClinicalCentreAdministrator;\r\n  listAdmins: Array<ClinicalCentreAdministrator> = new Array<ClinicalCentreAdministrator>();\r\n  clinicalCentreAdministrator: ClinicalCentreAdministrator;\r\n  editD: ClinicalCentreAdministrator;\r\n  tmp: Array<Patient>;\r\n  patient: Patient;\r\n  constructor(\r\n          private http: HttpClient,\r\n          private userService: UserServiceService,\r\n          private patientService: PatientService) {\r\n    this.clinicalCentreAdministrator = new ClinicalCentreAdministrator('zejak@email.com', 'Zejake123', 'Nikola', 'Zejak', '789456321');\r\n    this.listAdmins.push(this.clinicalCentreAdministrator);\r\n  }\r\n\r\n  public loginAdmin(clinicalCentreAdministrator) {\r\n    this.userService.setToken(clinicalCentreAdministrator);\r\n    return this.http.post(environment.baseUrl + '/login', clinicalCentreAdministrator, {responseType: 'text'});\r\n  }\r\n  public editAdmin(clinicalCentreAdministrator) {\r\n    return this.http.post(this.urlAdmin + '/edit', clinicalCentreAdministrator , {responseType: 'text'});\r\n  }\r\n\r\n  public getAdmin(email: string) {\r\n    if ( this.listAdmins.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listAdmins) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setAdmin(d: ClinicalCentreAdministrator) {\r\n    for (const d1 of this.listAdmins) {\r\n      if (d1.email === d.email) {\r\n        d1.password = d.password;\r\n        d1.name = d.name;\r\n        d1.surname = d.surname;\r\n        d1. number = d.number;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getAllRequests(): Array<Patient> {\r\n    this.http.get(this.urlAdmin + '/requests').subscribe((data: Patient[]) => {\r\n        this.tmp = new Array<Patient>();\r\n        for (const c of data) {\r\n          if (this.patientService.whichStatus(c.status.toString()) === PatientStatus.AWAITING_APPROVAL) {\r\n            this.patient = new Patient(c.email, c.password, c.name, c.surname, c.number, c.address, c.city, c.country, c.insuranceID, this.patientService.whichStatus(c.status.toString()));\r\n            this.tmp.push(this.patient);\r\n          }\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.tmp;\r\n  }\r\n\r\n\r\n\r\n  }\r\n","import { Injectable } from '@angular/core';\r\nimport {Diagnose} from '../model/Diagnose';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {environment} from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DiagnoseService {\r\n\r\n  url = environment.baseUrl + environment.diagnose;\r\n  diagnose: Diagnose;\r\n  diagnose1: Diagnose;\r\n  listDiagnoses: Array<Diagnose> = new Array<Diagnose>();\r\n\r\n  constructor(private http: HttpClient\r\n  ) {\r\n\r\n    this.getAllDiagnoses();\r\n  }\r\n\r\n  public editDiagnose(diagnose) {\r\n    return this.http.post(this.url + '/edit', diagnose, {responseType: 'text'});\r\n  }\r\n\r\n  public getDiagnose(id: number) {\r\n    if ( this.listDiagnoses.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listDiagnoses) {\r\n      if ( u.id === id) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setDiagnose(d: Diagnose) {\r\n    for (const diag of this.listDiagnoses) {\r\n      if (diag.id === d.id) {\r\n        diag.title = d.title;\r\n        diag.description = d.description;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public addDiagnose(d: Diagnose) {\r\n    if (this.getDiagnose(d.id) === null) {\r\n      this.listDiagnoses.push(d);\r\n    }\r\n  }\r\n\r\n  public newDiagnose(diagnose) {\r\n    return this.http.post(this.url + '/clinical-centre-admin/addDiagnose', diagnose);\r\n  }\r\n\r\n  public getAllDiagnoses(): Array<Diagnose> {\r\n    this.http.get(this.url + '/all').subscribe((data: Diagnose[]) => {\r\n        for (const c of data) {\r\n          this.diagnose1 = new Diagnose(c.id, c.title, c.description);\r\n          this.addDiagnose(this.diagnose1);\r\n          console.log(c);\r\n          console.log('Ispod admin klinike');\r\n          console.log(this.diagnose1);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listDiagnoses;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {Doctor} from '../model/doctor';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {Clinic} from '../model/clinic';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DoctorService {\r\n\r\n  urlDoctor = environment.baseUrl + environment.doctor;\r\n  listDoctors: Array<Doctor> = new Array<Doctor>();\r\n  doctor: Doctor;\r\n  editD: Doctor;\r\n  doctorss: Array<Doctor> = new Array<Doctor>();\r\n  termins: Array<string> = new Array<string>();\r\n  doctorsWithSearch: Array<Doctor> = new Array<Doctor>();\r\n  termin: string;\r\n  date: string;\r\n  doctorForMake: Doctor;\r\n  intervals: Array<string[]> = new Array<string[]>();\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserServiceService\r\n  ) {\r\n    this.getAllDoctors();\r\n  }\r\n\r\n  public loginDoctor(doctor) {\r\n    this.userService.setToken(doctor);\r\n    return this.http.post(environment.baseUrl + '/login', doctor, {responseType: 'text'});\r\n  }\r\n\r\n  public editDoctor(doctor) {\r\n    return this.http.post(this.urlDoctor + '/edit', doctor, {responseType: 'text'});\r\n  }\r\n\r\n  public getDoctor(email: string) {\r\n    if ( this.listDoctors.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listDoctors) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public addDoctor(d: Doctor) {\r\n    if (this.getDoctor(d.email) === null) {\r\n      this.listDoctors.push(d);\r\n    }\r\n  }\r\n\r\n  public setDoctor(d: Doctor) {\r\n    for (const d1 of this.listDoctors) {\r\n      if (d1.email === d.email) {\r\n        d1.password = d.password;\r\n        d1.name = d.name;\r\n        d1.surname = d.surname;\r\n        d1.phone = d.phone;\r\n        d1.workHoursFrom = d.workHoursFrom;\r\n        d1.workHoursTo = d.workHoursTo;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getAllDoctors(): Array<Doctor> {\r\n    this.http.get(this.urlDoctor + '/all').subscribe((data: Doctor[]) => {\r\n        for (const c of data) {\r\n          this.doctor = new Doctor(c.email, c.password, c.name, c.surname, c.phone, c.workHoursFrom, c.workHoursTo, c.specialized, c.doctorRating, c.clinic);\r\n          this.addDoctor(this.doctor);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.listDoctors;\r\n  }\r\n\r\n  public getDoctorsTermins(date: string, email: string): Array<string> {\r\n    let params = new HttpParams();\r\n    params = params.append('date', date);\r\n    params = params.append('email', email);\r\n    console.log(params)\r\n    this.http.get(this.urlDoctor + '/terminString', {params}).subscribe((data: string[]) => {\r\n        this.termins = new Array<string>();\r\n        console.log('Ispod ovde');\r\n        console.log(data);\r\n        this.termins = data;\r\n        this.intervals.push(this.termins);\r\n\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.termins;\r\n  }\r\n\r\n  public getDoctorss() {\r\n    return this.doctorss;\r\n  }\r\n\r\n  public setDoctorss(doctorss: Array<Doctor>) {\r\n    this.doctorss = doctorss;\r\n  }\r\n\r\n  public getDoctrosWithSearch(name: string, surname: string, rating: string): Array<Doctor> {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('name', name);\r\n    params = params.append('surname', surname);\r\n    params = params.append('rating', rating);\r\n    this.doctorsWithSearch = new Array<Doctor>();\r\n    this.http.get(this.urlDoctor + '/allWithSearch', {params}).subscribe((data: Doctor[]) => {\r\n        console.log(data)\r\n        for (const c of data) {\r\n          this.doctor = new Doctor(c.email, c.password, c.name, c.surname, c.phone, c.workHoursFrom, c.workHoursTo,\r\n            c.specialized, c.doctorRating, c.clinic);\r\n          this.doctorsWithSearch.push(this.doctor);\r\n          console.log(this.doctor);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n      );\r\n\r\n    return this.doctorsWithSearch;\r\n  }\r\n\r\n  public setExaminationsInterval(intervals: Array<string[]>) {\r\n    this.intervals = intervals;\r\n    console.log('ISPOD INTERVALI');\r\n    console.log(this.intervals);\r\n  }\r\n\r\n  public getExaminationsInterval() {\r\n    return this.intervals;\r\n  }\r\n\r\n  public setDate(date) {\r\n    this.date = date;\r\n  }\r\n\r\n  public getDate() {\r\n    return this.date;\r\n  }\r\n\r\n  public setDoctorForMake(doctor: Doctor) {\r\n    this.doctorForMake = doctor;\r\n  }\r\n\r\n  public getDoctorForMake() {\r\n    return this.doctorForMake;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {ExaminationType} from '../model/examinationType';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {environment} from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExaminationsTypeService {\r\n\r\n  urlExaminationType = environment.baseUrl + environment.examinationType;\r\n  examinationTypes: Array<ExaminationType> = new Array<ExaminationType>();\r\n  type: ExaminationType;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getAllTypes(): Array<ExaminationType> {\r\n    this.http.get(this.urlExaminationType + '/all').subscribe((data: ExaminationType[]) => {\r\n        for (const c of data) {\r\n          this.type = new ExaminationType(c.label, c.price);\r\n          this.addType(this.type);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.examinationTypes);\r\n    return this.examinationTypes;\r\n  }\r\n\r\n  public addType(t: ExaminationType) {\r\n    if (this.getType(t.label) === null) {\r\n      this.examinationTypes.push(t);\r\n    }\r\n  }\r\n\r\n  public getType(name: string) {\r\n    if ( this.examinationTypes.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.examinationTypes) {\r\n      if ( u.label === name) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {Examination} from '../model/examination';\r\nimport {ExaminationKind} from '../model/examinationKind';\r\nimport {ExaminationStatus} from '../model/examinationStatus';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {ExaminationType} from '../model/examinationType';\r\nimport {ExaminationReport} from '../model/examinationReport';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExaminationService {\r\n\r\n  url = environment.baseUrl + environment.examination;\r\n  listExaminations: Array<Examination> = new Array<Examination>();\r\n  examination: Examination;\r\n  examinationDoctor: Examination;\r\n  examinationForDoctor: Array<Examination> = new Array<Examination>();\r\n  examinationReport: ExaminationReport;\r\n  predefExaminations: Array<Examination> = new Array<Examination>();\r\n  etype: ExaminationType;\r\n  MHFP: Array<Examination> = new Array<Examination>();\r\n  tmp: Array<Examination> = new Array<Examination>();\r\n  flag: boolean;\r\n  examinationForRating: Examination;\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) {\r\n    this.getAllExaminations();\r\n  }\r\n\r\n  public whichKindExamination(kind: string) {\r\n    if (kind === 'EXAMINATION') {\r\n      return ExaminationKind.EXAMINATION;\r\n    } else {\r\n      return ExaminationKind.OPERATION;\r\n    }\r\n  }\r\n\r\n  public whichStatusExamination(status: string) {\r\n    if (status === 'APPROVED') {\r\n      return ExaminationStatus.APPROVED;\r\n    } else if (status === 'AWAITING') {\r\n      return ExaminationStatus.AWAITING;\r\n    } else if (status === 'PREDEF_BOOKED') {\r\n      return  ExaminationStatus.PREDEF_BOOKED;\r\n    } else {\r\n      return ExaminationStatus.PREDEF_AVAILABLE;\r\n    }\r\n  }\r\n\r\n  public getAllExaminations(): Array<Examination> {\r\n    this.http.get(this.url + '/all').subscribe((data: Examination[]) => {\r\n        this.listExaminations = new Array<Examination>();\r\n        for (const c of data) {\r\n          this.examination =  new Examination(this.whichKindExamination(c.kind.toString()), this.whichStatusExamination(c.status.toString()), c.examinationType, c.discount, c.doctorRating, c.clinicRating, c.nurse, c.clinic, c.patient, c.doctors, c.id, c.interval);\r\n          this.listExaminations.push(this.examination);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.listExaminations);\r\n    return this.listExaminations;\r\n  }\r\n\r\n  public addExamination(e: Examination) {\r\n    if (this.getExamination(e.id) === null) {\r\n      this.listExaminations.push(e);\r\n    }\r\n  }\r\n  public getExamination(id: number) {\r\n    if ( this.listExaminations.length === 0) {\r\n      return null;\r\n    }\r\n    for (const e of this.listExaminations) {\r\n      if (e.id === id) {\r\n        return e;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getAllPredefExaminations(): Array<Examination> {\r\n    this.http.get(this.url + '/allPredefExaminations').subscribe((data: Examination[]) => {\r\n        console.log('data ispod');\r\n        console.log(data);\r\n        this.predefExaminations = new Array<Examination>();\r\n        for (const c of data) {\r\n          this.examination =  new Examination(this.whichKindExamination(c.kind.toString()), this.whichStatusExamination(c.status.toString()), c.examinationType, c.discount, c.doctorRating, c.clinicRating, c.nurse, c.clinic, c.patient, c.doctors, c.id, c.interval);\r\n          this.predefExaminations.push(this.examination);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.predefExaminations);\r\n    return this.predefExaminations;\r\n  }\r\n\r\n  public getMHforP(email: string): Array<Examination> {\r\n    let params = new HttpParams();\r\n    params = params.append('email', email);\r\n    this.tmp = new Array<Examination>();\r\n    this.http.get(this.url + '/getMHforP', {params}).subscribe((data: Examination[]) => {\r\n        for (const c of data) {\r\n          this.examination =  new Examination(this.whichKindExamination(c.kind.toString()), this.whichStatusExamination(c.status.toString()), c.examinationType, c.discount, c.doctorRating, c.clinicRating, c.nurse, c.clinic, c.patient, c.doctors, c.id, c.interval);\r\n          this.tmp.push(this.examination);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    this.MHFP = this.tmp;\r\n    return this.MHFP;\r\n  }\r\n\r\n  public setMHFP(examinations: Array<Examination>) {\r\n    this.MHFP = examinations;\r\n  }\r\n\r\n  public getMHFP() {\r\n    return this.MHFP;\r\n  }\r\n\r\n  public makePredefExamination(id: string, email: string) {\r\n    let params = new HttpParams();\r\n    params = params.append('id', id);\r\n    params = params.append('email', email);\r\n    return this.http.post(this.url + '/makePredefExamination', params);\r\n  }\r\n\r\n  public makeExamination(date: string, patientEmail: string, doctorEmail: string, type: string, clinicId: string, kind: string, adminsClinic: string) {\r\n    let params = new HttpParams();\r\n    params = params.append('date', date);\r\n    params = params.append('patientEmail', patientEmail);\r\n    params = params.append('doctorEmail', doctorEmail);\r\n    params = params.append('type', type);\r\n    params = params.append('clinicId', clinicId);\r\n    params = params.append('kind', kind);\r\n    params = params.append('adminsClinic', adminsClinic);\r\n    return this.http.post(this.url + '/addExaminationPatient', params);\r\n  }\r\n\r\n  public getExaminationsForDoctor(email: string): Array<Examination> {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('email', email);\r\n    this.examinationForDoctor = new Array<Examination>();\r\n    this.http.get(this.url + '/allExaminationsForDoctor', {params}).subscribe((data: Examination[]) => {\r\n        for (const c of data) {\r\n          this.examinationDoctor =  new Examination(this.whichKindExamination(c.kind.toString()), this.whichStatusExamination(c.status.toString()), c.examinationType, c.discount, c.doctorRating, c.clinicRating, c.nurse, c.clinic, c.patient, c.doctors, c.id, c.interval);\r\n          this.examinationForDoctor.push(this.examinationDoctor);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log('Ispod');\r\n    console.log(this.examinationForDoctor);\r\n    return this.examinationForDoctor;\r\n  }\r\n\r\n  public getPatientForDoctors() {\r\n    return this.examinationForDoctor;\r\n  }\r\n\r\n  public async getFlagForRate(id: string): Promise<boolean> {\r\n    let params = new HttpParams();\r\n    params = params.append('id', id);\r\n    this.flag = false;\r\n\r\n    const response: any = await this.http.get(this.url + '/getFlagForRate', {params}).toPromise();\r\n    return response;\r\n  }\r\n\r\n  public setExaminationForRating(examination) {\r\n    this.examinationForRating = examination;\r\n  }\r\n\r\n  public getExaminationForRating() {\r\n    return this.examinationForRating;\r\n  }\r\n\r\n  public RateDoctorAndClinic(examinationId: string, doctorRating: string, clinicRating: string) {\r\n    let params = new HttpParams();\r\n    params = params.append('examinationId', examinationId);\r\n    params = params.append('doctorRating', doctorRating);\r\n    params = params.append('clinicRating', clinicRating);\r\n\r\n    return this.http.post(this.url + '/rateDoctorAndClinic', params);\r\n\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {Examination} from '../model/examination';\r\nimport {MedicalRecord} from '../model/medicalRecord';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {ExaminationReport} from '../model/examinationReport';\r\nimport {Nurse} from '../model/nurse';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MedicalRecordService {\r\n\r\n  url = environment.baseUrl + environment.medicalRecord;\r\n  listMedicalRecord: Array<MedicalRecord> = new Array<MedicalRecord>();\r\n  medicalRecord: MedicalRecord;\r\n  examiantionReport: ExaminationReport;\r\n  MRFP: MedicalRecord;\r\n  medicalRecordForPatient: MedicalRecord;\r\n  medicalRecordForDialog: MedicalRecord;\r\n  dialogDate = false;\r\n  listExaminationReport: Array<ExaminationReport> = new Array<ExaminationReport>();\r\n  examinationRepForP: ExaminationReport\r\n\r\n  constructor(private http: HttpClient,) {\r\n    this.getAllMedicalRecords();\r\n  }\r\n\r\n  public addMedicalRecord(mr: MedicalRecord) {\r\n    if (this.getMedicalRecord(mr.id) === null) {\r\n      this.listMedicalRecord.push(mr);\r\n    }\r\n  }\r\n\r\n  public getAllMedicalRecords(): Array<MedicalRecord> {\r\n    this.http.get(this.url + '/all').subscribe((data: MedicalRecord[]) => {\r\n        this.listMedicalRecord = new Array<MedicalRecord>();\r\n        for (const c of data) {\r\n          // Ostalo je da se doda examinaton_report u konstruktoru\r\n          console.log('Ispod data za medial rekod');\r\n          console.log(c);\r\n          this.medicalRecord = new MedicalRecord(c.id, c.height, c.weight, c.bloodType, c.allergies, c.patient, c.examinationReports);\r\n          this.listMedicalRecord.push(this.medicalRecord);\r\n          console.log(this.medicalRecord);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.listMedicalRecord);\r\n    return this.listMedicalRecord;\r\n  }\r\n\r\n  public getMRforP(email: string): MedicalRecord {\r\n    let params = new HttpParams();\r\n    params = params.append('email', email);\r\n    this.http.get(this.url + '/mrForP', {params}).subscribe((data: MedicalRecord) => {\r\n        this.MRFP = data;\r\n        console.log(this.MRFP);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.MRFP;\r\n\r\n  }\r\n\r\n  public getMRFP() {\r\n    return this.MRFP;\r\n  }\r\n\r\n  public setMRFP(medicalRecord: MedicalRecord) {\r\n    this.MRFP = medicalRecord;\r\n  }\r\n\r\n  public getMedicalRecord(id: number) {\r\n    if (this.listMedicalRecord.length === 0) {\r\n      return null;\r\n    }\r\n    for (const e of this.listMedicalRecord) {\r\n      if (e.id === id) {\r\n        return e;\r\n      }\r\n    }\r\n  }\r\n\r\n  public editMedicalRecord(medicalRecord) {\r\n    return this.http.post(this.url + '/edit', medicalRecord, {responseType: 'text'});\r\n  }\r\n\r\n  public setExaminationReport(p: ExaminationReport) {\r\n    for (const p1 of this.listExaminationReport) {\r\n      if (p1.id === p.id) {\r\n        p1.comment = p.comment;\r\n      }\r\n    }\r\n  }\r\n\r\n  public setMedicalRecord(p: MedicalRecord) {\r\n\r\n    for (const p1 of this.listMedicalRecord) {\r\n      if (p1.id === p.id) {\r\n        p1.weight = p.weight;\r\n        p1.bloodType = p.bloodType;\r\n        p1.allergies = p.allergies;\r\n        p1.examinationReports = p.examinationReports;\r\n        p1.height = p.height;\r\n        p1.patient = p.patient;\r\n        p1.examinationReports = p.examinationReports;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getMedicalRecordForPatient(email: string): MedicalRecord {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('email', email);\r\n    this.http.get(this.url + '/MedicalRecordForPatient', {params}).subscribe((data: MedicalRecord) => {\r\n        console.log('MEDICAL RECORD DATA ISPOD');\r\n        console.log(data);\r\n        this.medicalRecordForPatient = new MedicalRecord(data.id, data.height, data.weight, data.bloodType, data.allergies, data.patient, data.examinationReports);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log('Ispod');\r\n    console.log(this.medicalRecordForPatient);\r\n    return this.medicalRecordForPatient;\r\n  }\r\n\r\n  public setMedicalRecordForDialog(medicalRecord) {\r\n    console.log('medicalRecord');\r\n    this.medicalRecordForDialog = medicalRecord;\r\n  }\r\n\r\n  public getMedicalRecordForDialog() {\r\n    return this.medicalRecordForDialog;\r\n  }\r\n\r\n  public getLocalDateAndTime(interval: string, interval1: string): boolean {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('interval', interval);\r\n    params = params.append('interval1', interval1);\r\n\r\n    this.http.get(this.url + '/DateAndTime', {params}).subscribe((data: boolean) => {\r\n        this.dialogDate = data;\r\n        console.log('localDateAndTime');\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      });\r\n    return this.dialogDate;\r\n  }\r\n\r\n  public setExaminationReportForPatient(examinationReport) {\r\n    console.log('medicalRecord');\r\n    this.examinationRepForP = examinationReport;\r\n  }\r\n\r\n  public getExaminationReportForPatient() {\r\n    return this.examinationRepForP;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {Nurse} from '../model/nurse';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {environment} from '../../environments/environment';\r\nimport {Medicaments} from '../model/Medicaments';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MedicamentsService {\r\n\r\n  url = environment.baseUrl + environment.medicaments\r\n  listMedicaments: Array<Medicaments> = new Array<Medicaments>();\r\n  medicaments: Medicaments;\r\n\r\n  constructor(\r\n    private http: HttpClient) {\r\n\r\n    this.getAllMedicaments();\r\n  }\r\n\r\n  public editMedicament(medicament) {\r\n    return this.http.post(this.url + '/edit', medicament, {responseType: 'text'});\r\n  }\r\n\r\n  public newMedicament(medicament) {\r\n    return this.http.post(this.url + '/clinical-centre-admin/addMedicament', medicament);\r\n  }\r\n\r\n\r\n  public getMedicament(id: number) {\r\n    if ( this.listMedicaments.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listMedicaments) {\r\n      if ( u.id === id) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setMedicament(p: Medicaments) {\r\n\r\n    for (const p1 of this.listMedicaments) {\r\n      if (p1.id === p.id) {\r\n        p1.title = p.title;\r\n        p1.description = p.description;\r\n        p1.strenght = p.strenght;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public addMedicament(n: Medicaments) {\r\n    if (this.getMedicament(n.id) === null) {\r\n      this.listMedicaments.push(n);\r\n    }\r\n  }\r\n\r\n  public getAllMedicaments(): Array<Medicaments> {\r\n    this.http.get(this.url + '/getAllMedicaments').subscribe((data: Medicaments[]) => {\r\n        for (const c of data) {\r\n          this.medicaments = new Medicaments(c.id, c.title, c.description, c.strenght);\r\n          this.addMedicament(this.medicaments);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listMedicaments;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {Nurse} from '../model/nurse';\r\nimport {Patient} from '../model/patient';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NurseServiceService {\r\n\r\n  urlNurse = environment.baseUrl + environment.nurse;\r\n  listNurses: Array<Nurse> = new Array<Nurse>();\r\n\r\n  nurse: Nurse;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserServiceService) {\r\n\r\n    this.getAllNurses();\r\n  }\r\n\r\n  public loginNurse(nurse) {\r\n    this.userService.setToken(nurse);\r\n    return this.http.post(environment.baseUrl + '/login', nurse, {responseType: 'text'});\r\n  }\r\n\r\n  public editNurse(nurse) {\r\n    return this.http.post(this.urlNurse + '/edit', nurse, {responseType: 'text'});\r\n  }\r\n\r\n  public getNurse(email: string) {\r\n    if ( this.listNurses.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listNurses) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setNurse(p: Nurse) {\r\n\r\n    for (const p1 of this.listNurses) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.phone = p.phone;\r\n        p1.surname = p.surname;\r\n        p1.workHoursTo = p.workHoursTo;\r\n        p1.workHoursFrom = p.workHoursFrom;\r\n        p1.password = p.password;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public addNurse(n: Nurse) {\r\n    if (this.getNurse(n.email) === null) {\r\n      this.listNurses.push(n);\r\n    }\r\n  }\r\n\r\n  public getAllNurses(): Array<Nurse> {\r\n    this.http.get(this.urlNurse + '/all').subscribe((data: Nurse[]) => {\r\n        for (const c of data) {\r\n          this.nurse = new Nurse(c.email, c.password, c.name, c.surname, c.phone, c.workHoursTo, c.workHoursFrom);\r\n          this.addNurse(this.nurse);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listNurses;\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {environment} from '../../environments/environment';\r\nimport {Patient} from '../model/patient';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {PatientStatus} from '../model/patientStatus';\r\nimport {Examination} from '../model/examination';\r\nimport {ExaminationKind} from '../model/examinationKind';\r\nimport {ExaminationStatus} from '../model/examinationStatus';\r\nimport {Clinic} from '../model/clinic';\r\nimport {Doctor} from '../model/doctor';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PatientService {\r\n\r\n  urlPatient = environment.baseUrl + environment.patient;\r\n  listPatients: Array<Patient> = new Array<Patient>();\r\n  patientWithDoctor: Array<Patient> = new Array<Patient>();\r\n  patients: Array<Patient> = new Array<Patient>();\r\n  patient: Patient;\r\n  patient1: Patient;\r\n  editP: Patient;\r\n  tmp: Array<Patient>;\r\n  listExaminations: Array<Examination>;\r\n  examination: Examination;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserServiceService\r\n  ) {\r\n    this.getAllPatients();\r\n    this.getAllRequests();\r\n  }\r\n\r\n  public newPatient(patient) {\r\n    return this.http.post(this.urlPatient + '/register', patient);\r\n  }\r\n\r\n  public loginPatient(patient) {\r\n    this.userService.setToken(patient);\r\n    return this.http.post(environment.baseUrl + '/login', patient, {responseType: 'text'});\r\n  }\r\n\r\n  public activatePatient(id: number) {\r\n\r\n    const headers = new HttpHeaders({'Content-Type': 'application/json'});\r\n\r\n    return this.http.put(this.urlPatient + '/activatePatient', id, {headers});\r\n  }\r\n\r\n  public editPatient(patient) {\r\n    return this.http.post(this.urlPatient + '/edit', patient, {responseType: 'text'});\r\n  }\r\n\r\n  public addPatient(p: Patient) {\r\n    if (this.getPatient(p.email) === null) {\r\n      this.listPatients.push(p);\r\n    }\r\n  }\r\n\r\n  public getPatient(email: string) {\r\n    if ( this.listPatients.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listPatients) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setPatient(p: Patient) {\r\n\r\n    for (const p1 of this.listPatients) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.number = p.number;\r\n        p1.country = p.country;\r\n        p1.address = p.address;\r\n        p1.surname = p.surname;\r\n        p1.city = p.city;\r\n        p1.password = p.password;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public whichStatus(status: string) {\r\n    if (status === 'AWAITING_APPROVAL') {\r\n      return PatientStatus.AWAITING_APPROVAL;\r\n    } else if (status === 'APPROVED') {\r\n      return PatientStatus.APPROVED;\r\n    } else {\r\n      return PatientStatus.ACTIVATED;\r\n    }\r\n\r\n\r\n  }\r\n\r\n  public getAllPatients(): Array<Patient> {\r\n    this.http.get(this.urlPatient + '/all').subscribe((data: Patient[]) => {\r\n        for (const c of data) {\r\n          this.patient = new Patient(c.email, c.password, c.name, c.surname, c.number, c.address, c.city, c.country, c.insuranceID, this.whichStatus(c.status.toString()));\r\n          this.addPatient(this.patient);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listPatients;\r\n  }\r\n\r\n  public getAllRequests(): Array<Patient> {\r\n    this.http.get(this.urlPatient + '/requests').subscribe((data: Patient[]) => {\r\n        this.tmp = new Array<Patient>();\r\n        for (const c of data) {\r\n            this.patient = new Patient(c.email, c.password, c.name, c.surname, c.number, c.address, c.city, c.country, c.insuranceID, PatientStatus.AWAITING_APPROVAL);\r\n            this.tmp.push(this.patient);\r\n            console.log(this.patient);\r\n          }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.tmp);\r\n    return this.tmp;\r\n  }\r\n\r\n  public getPatientsForDoctor(email: string): Array<Patient> {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('email', email);\r\n    this.patientWithDoctor = new Array<Patient>();\r\n    this.http.get(this.urlPatient + '/allPatientsForDoctor', {params}).subscribe((data: Patient[]) => {\r\n        for (const c of data) {\r\n          this.patient = new Patient(c.email, c.password, c.name, c.surname, c.number, c.address, c.city, c.country , c.insuranceID, c.status);\r\n          this.patientWithDoctor.push(this.patient);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log('Ispod');\r\n    console.log(this.patientWithDoctor);\r\n    return this.patientWithDoctor;\r\n  }\r\n\r\n  public getPatientForDoctors() {\r\n    return this.patientWithDoctor;\r\n  }\r\n\r\n  public getPatient1() {\r\n    return this.patient1;\r\n  }\r\n\r\n  public setPatient1(pat: Patient) {\r\n    console.log('setPatient');\r\n    this.patient1 = pat;\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {User} from '../model/user';\r\nimport {Role} from '../model/role';\r\nimport {Router} from '@angular/router';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {environment} from '../../environments/environment';\r\nimport {Clinic} from '../model/clinic';\r\n\r\nexport const TOKEN = 'LoggedInUser';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserServiceService {\r\n\r\n  list: Array<User> = new Array<User>();\r\n  u: User;\r\n  urlUser = environment.baseUrl + environment.user;\r\n  user: User = new User('', '', Role.NONE);\r\n  constructor(private router: Router, private http: HttpClient) {\r\n    this.getAllUsers();\r\n    localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n  }\r\n\r\n  public addUser(u: User) {\r\n    if (this.getUser(u.email) === null) {\r\n      this.list.push(u);\r\n    }\r\n  }\r\n\r\n  public getUser(email: string) {\r\n    if ( this.list.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.list) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public setUser(u: User) {\r\n\r\n    for (const p1 of this.list) {\r\n      if (p1.email === u.email) {\r\n        p1.password = u.password;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public setToken(user) {\r\n    localStorage.setItem(TOKEN, JSON.stringify(user));\r\n    this.user = user;\r\n  }\r\n\r\n  public isLoggedIn() {\r\n    if (localStorage.getItem(TOKEN) !== null) {\r\n      return localStorage.getItem(TOKEN);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public logOut() {\r\n    this.router.navigate(['']);\r\n    this.user =  new User('', '', Role.NONE);\r\n    localStorage.removeItem(TOKEN);\r\n    localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n  }\r\n\r\n  public isPatient() {\r\n    if (this.isLoggedIn()) {\r\n      return this.user.role === Role.PATIENT;\r\n    }\r\n  }\r\n\r\n  public isDoctor() {\r\n    if (this.isLoggedIn()) {\r\n      return this.user.role === Role.DOCTOR;\r\n    }\r\n  }\r\n\r\n  public isNurse() {\r\n    if (this.isLoggedIn()) {\r\n      return this.user.role === Role.NURSE;\r\n    }\r\n  }\r\n\r\n  public isClinicalAdmin() {\r\n    if (this.isLoggedIn()) {\r\n      return this.user.role === Role.CLINIC_ADMINISTRATOR;\r\n    }\r\n  }\r\n\r\n  public isClinicalCentreAdmin() {\r\n    if (this.isLoggedIn()) {\r\n      return this.user.role === Role.CLINICAL_CENTRE_ADMINISTRATOR;\r\n    }\r\n  }\r\n\r\n  public isNone() {\r\n    if (this.isLoggedIn()) {\r\n      return this.user.role === Role.NONE;\r\n    }\r\n  }\r\n\r\n  public whichRole(role: string) {\r\n    if (role === 'PATIENT') {\r\n      return Role.PATIENT;\r\n    } else if (role === 'DOCTOR') {\r\n      return  Role.DOCTOR;\r\n    } else if (role === 'NURSE') {\r\n      return  Role.NURSE;\r\n    } else if (role === 'CLINIC_ADMINISTRATOR') {\r\n      return  Role.CLINIC_ADMINISTRATOR;\r\n    } else if (role === 'CLINICAL_CENTRE_ADMINISTRATOR') {\r\n      return  Role.CLINICAL_CENTRE_ADMINISTRATOR;\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  }\r\n\r\n  public getAllUsers(): Array<User> {\r\n    this.http.get(this.urlUser + '/all').subscribe((data: User[]) => {\r\n        for (const c of data) {\r\n            this.u = new User(c.email, c.password, this.whichRole(c.role.toString()));\r\n            this.addUser(this.u);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.list);\r\n    return this.list;\r\n  }\r\n\r\n  public setLoggedUser(user: User) {\r\n    this.user = user;\r\n  }\r\n\r\n  public getLoggedUser() {\r\n    return this.user;\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {Zahtev} from '../model/Zahtev';\r\nimport {environment} from '../../environments/environment';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {ZahtevStatus} from '../model/ZahtevStatus';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VacationService {\r\n\r\n  urlVacation = environment.baseUrl + environment.zahtev;\r\n  listVacation: Array<Zahtev> = new Array<Zahtev>();\r\n  zahtev: Zahtev;\r\n  tmp: Array<Zahtev>;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserServiceService\r\n  ) {\r\n\r\n     this.getAllVacations();\r\n     this.getAllRequests();\r\n  }\r\n\r\n  public newVacation(zahtev) {\r\n    return this.http.post(this.urlVacation + '/nurse/VacationRequest', zahtev);\r\n  }\r\n\r\n  public newVacation1(zahtev) {\r\n    return this.http.post(this.urlVacation + '/doctor/VacationRequest', zahtev);\r\n  }\r\n\r\n  public addVacation(v: Zahtev) {\r\n    if (this.getVacations(v.email) === null) {\r\n      this.listVacation.push(v);\r\n    }\r\n  }\r\n\r\n  public addVacation1(v: Zahtev) {\r\n    if (this.getVacations(v.email) === null) {\r\n      this.listVacation.push(v);\r\n    }\r\n  }\r\n\r\n  public getVacations(email: string) {\r\n    if ( this.listVacation.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listVacation) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  public getVacations1(email: string) {\r\n    if ( this.listVacation.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listVacation) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public editVacation(zahtev) {\r\n    return this.http.post(this.urlVacation + '/edit', zahtev, {responseType: 'text'});\r\n  }\r\n\r\n  public setVacation(p: Zahtev) {\r\n\r\n    for (const p1 of this.listVacation) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.surname = p.surname;\r\n        p1.startingDate = p.startingDate;\r\n        p1.finishDate = p.finishDate;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public setVacation1(p: Zahtev) {\r\n\r\n    for (const p1 of this.listVacation) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.surname = p.surname;\r\n        p1.startingDate = p.startingDate;\r\n        p1.finishDate = p.finishDate;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public whichStatus(status: string) {\r\n    if (status === 'AWAITING_APPROVAL') {\r\n      return ZahtevStatus.AWAITING_APPROVAL;\r\n    } else {\r\n      return ZahtevStatus.APPROVED;\r\n    }\r\n\r\n  }\r\n\r\n  public getAllVacations(): Array<Zahtev> {\r\n    this.http.get(this.urlVacation + '/all').subscribe((data: Zahtev[]) => {\r\n        for (const c of data) {\r\n          this.zahtev = new Zahtev(c.email, c.name, c.surname, c.startingDate, c.finishDate, this.whichStatus(c.status.toString()));\r\n          this.addVacation(this.zahtev);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listVacation;\r\n  }\r\n\r\n  public getAllRequests(): Array<Zahtev> {\r\n    this.http.get(this.urlVacation + '/VacationRequest').subscribe((data: Zahtev[]) => {\r\n        this.tmp = new Array<Zahtev>();\r\n        for (const c of data) {\r\n          this.zahtev = new Zahtev(c.email, c.name, c.surname, c.startingDate, c.finishDate, ZahtevStatus.AWAITING_APPROVAL);\r\n          this.tmp.push(this.zahtev);\r\n          console.log(this.zahtev);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.tmp);\r\n    return this.tmp;\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nimport {ClinicalCentreAdministrator} from '../app/model/ClinicalCentreAdministrator';\r\n\r\nexport const environment = {\r\n  production: false,\r\n  baseUrl: 'http://localhost:8081',\r\n  user: '/user',\r\n  patient: '/patient',\r\n  doctor: '/doctor',\r\n  clinic: '/clinic',\r\n  nurse: '/nurse',\r\n  adminClinic: '/admin_clinic',\r\n  ClinicalCentreAdministrator: '/clinical-centre-admin',\r\n  examination: '/examination',\r\n  medicalRecord: '/medicalRecord',\r\n  examinationType: '/examinationType',\r\n  zahtev: '/zahtev',\r\n  diagnose: '/diagnose',\r\n  medicaments: '/medicaments'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}